<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMq基础知识</title>
      <link href="/2021/12/16/RabbitMq%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/12/16/RabbitMq%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMq基本概述"><a href="#RabbitMq基本概述" class="headerlink" title="RabbitMq基本概述"></a>RabbitMq基本概述</h2><p><strong>RabbitMQ</strong>（Message Queue）是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。RabbitMQ服务器是用Erlang语言编写的，而集群和故障转移是构建在开放电信平台框架上的。本质是个队列，FIFO 先入先出，还是一种跨进程的通信机制，用于上下游传递消息。</p><h2 id="为什么要用MQ"><a href="#为什么要用MQ" class="headerlink" title="为什么要用MQ"></a>为什么要用MQ</h2><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p>削减系统请求负担<br><img src="https://gitee.com/silent-666/images/raw/685e95945b37addf5b8206af971a2a032036153b/RabbitMq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%89%8A%E5%B3%B0%E5%89%8D.jpg" alt="削峰前" style="zoom:80%;"><br>                                                                               削峰前</p><img src="https://gitee.com/silent-666/images/raw/685e95945b37addf5b8206af971a2a032036153b/RabbitMq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%89%8A%E5%B3%B0%E5%90%8E.jpg" alt="削峰后" style="zoom:80%;">                                                                               削峰后<h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><img src="https://gitee.com/silent-666/images/raw/685e95945b37addf5b8206af971a2a032036153b/RabbitMq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E8%A7%A3%E8%80%A6%E5%89%8D.jpg" alt="解耦前" style="zoom:80%;">                                                                               解耦前<img src="https://gitee.com/silent-666/images/raw/685e95945b37addf5b8206af971a2a032036153b/RabbitMq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E8%A7%A3%E8%80%A6%E5%90%8E5.jpg" alt="解耦后" style="zoom:80%;">                                                                                解耦后<h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p>系统将用户所需的请求发到mq就可去做其他事情，用mq进行分发消息。</p><img src="https://gitee.com/silent-666/images/raw/685e95945b37addf5b8206af971a2a032036153b/RabbitMq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%90%8C%E6%AD%A5.jpg" alt="同步" style="zoom:80%;">                                                         同步所花费的时间（300+300+300+20=920）<img src="https://gitee.com/silent-666/images/raw/685e95945b37addf5b8206af971a2a032036153b/RabbitMq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%BC%82%E6%AD%A5.jpg" alt="异步" style="zoom:80%;">                                                          异步所花费的时间（20+5=25）<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="https://gitee.com/silent-666/images/raw/685e95945b37addf5b8206af971a2a032036153b/RabbitMq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/rabbitmq%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="架构图"></p><h3 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h3><h4 id="生产者（Producer）"><a href="#生产者（Producer）" class="headerlink" title="生产者（Producer）"></a>生产者（Producer）</h4><p>生产者进行消息发布</p><h4 id="消费者（Consumer）"><a href="#消费者（Consumer）" class="headerlink" title="消费者（Consumer）"></a>消费者（Consumer）</h4><p>消费者监听队列中的消息，并从中取走消息。</p><h4 id="连接（Connection）"><a href="#连接（Connection）" class="headerlink" title="连接（Connection）"></a>连接（Connection）</h4><p>生产者必须与RabbitMq建立连接才能通讯</p><h4 id="信道（Channel）"><a href="#信道（Channel）" class="headerlink" title="信道（Channel）"></a>信道（Channel）</h4><p>生产者每次发送消息都与Mq建立连接很浪费资源，因此有了信道。在一个连接中有多个信道，生产者可以通过信道发送消息。</p><h4 id="Broker（RabbitMq-Sever）"><a href="#Broker（RabbitMq-Sever）" class="headerlink" title="Broker（RabbitMq Sever）"></a>Broker（RabbitMq Sever）</h4><p>Broker就是RabbitMq服务器</p><h4 id="虚拟机（Virtual-Host）"><a href="#虚拟机（Virtual-Host）" class="headerlink" title="虚拟机（Virtual Host）"></a>虚拟机（Virtual Host）</h4><p>一个Broker中有多个虚拟机，每个虚拟机中有多个交换机和队列</p><h4 id="交换机（Exchange）"><a href="#交换机（Exchange）" class="headerlink" title="交换机（Exchange）"></a>交换机（Exchange）</h4><p>Message到达Broker的第一站，绑定队列，根据分发规则分发到对应的队列中去。常用的类型有：</p><ul><li>简单模式（simple），使用默认的交换机，交换机不做声明。</li><li>定向模式（direct），根据routingKey定向分发消息到指定的队列。</li><li>广播模式（fanout），可以用广播的模式把消息同时分发到多个队列。</li><li>通配模式（Topic），可以支持通配的routingKey进行消息分发。</li></ul><h4 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h4><p>消息最终被送到这里等待消费者取走。队列和消费者可以是一对多也可以是一对一。</p><h4 id="绑定（Bingding）"><a href="#绑定（Bingding）" class="headerlink" title="绑定（Bingding）"></a>绑定（Bingding）</h4><p>交换机和队列之间的虚拟连接，一个交换机可以绑定多个队列。</p><h4 id="routingKey"><a href="#routingKey" class="headerlink" title="routingKey"></a>routingKey</h4><p>在交换机和队列绑定是，可以指定分发规则，即routingKey，依据routingKey进行分发。</p>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务间的http调用</title>
      <link href="/2020/08/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%B4%E7%9A%84http%E8%B0%83%E7%94%A8/"/>
      <url>/2020/08/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%B4%E7%9A%84http%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是HTTP"><a href="#什么是HTTP" class="headerlink" title="什么是HTTP"></a>什么是HTTP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Hyper Text Transfer Protocol（超文本传输协议）是基于TCP/IP的应用层协议。主要是用来规定客户端和服务端之间数据传输的格式。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://gitee.com/silent-666/images/raw/00294a0edab63d700865ece81e6c16dee3782232/HTTP%E8%AF%B7%E6%B1%82/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="请求报文结构"></p><ul><li><p>请求报文</p><ul><li><p>请求行：请求方法（get，post，put，delete），url地址，协议版本</p></li><li><p>请求头 （键值对形式）</p></li><li><p>请求体（存放参数）</p></li></ul></li><li><p>Tip</p><p>URL（Uniform Resource Loactor） 统一资源定位符。</p><p>格式：schema://host:port/path/?queryString</p></li></ul><p><img src="https://gitee.com/silent-666/images/raw/00294a0edab63d700865ece81e6c16dee3782232/HTTP%E8%AF%B7%E6%B1%82/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="响应报文结构"></p><ul><li><p>响应报文</p><ul><li>响应行： 协议版本，状态码， 状态描述（OK）</li><li>响应头：（sever，expires）</li><li>响应体： html</li></ul></li><li><p>Tip 状态码</p><ul><li><p>1xx：初始请求已经接受，继续处理客户端发送剩余的请求</p></li><li><p>200：成功</p></li><li><p>301：重定向，永久移动，原先url不可用</p></li><li><p>302：临时重定向，原先url可用</p></li><li><p>400：请求语法错误</p></li><li><p>401：要求省份验证</p></li><li><p>403：拒绝请求</p></li><li><p>404：资源不存在</p></li><li><p>5xx：服务器错误。</p></li></ul></li></ul><h1 id="HTTP调用的过程"><a href="#HTTP调用的过程" class="headerlink" title="HTTP调用的过程"></a>HTTP调用的过程</h1><p>首先是应用层的客户端程序发起请求的HTTP数据，请求分别经过传输层，网络层链路层，物理层进行一系列的处理。</p><ul><li><p>应用层：在TCP三次握手后，客户端和服务器同时开发资源空间，通socket进行传输数据。</p></li><li><p>传输层：TCP通过三次握手建立可靠的连接并且告知网络层</p></li><li><p>网络层：网络层根据路由表寻址，找到下一跳。</p></li><li><p>链路层：根据arp表找到其他设备。</p></li></ul><p>数据发送完成后，传输层的TCP进行四次挥手。同时服务端应用程序收到的数据可以根据HTTP的协议进行解析，获取内容。</p><p><img src="https://gitee.com/silent-666/images/raw/c229ee32c92dfcb5b0f1c11cfeddb6348d178489/HTTP%E8%AF%B7%E6%B1%82/HTTP%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B.png" alt="HTTP传输过程"></p><h1 id="简单实现HTTP传输"><a href="#简单实现HTTP传输" class="headerlink" title="简单实现HTTP传输"></a>简单实现HTTP传输</h1><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    请求行</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer requestLine<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    请求头</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer requestHeader<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    请求体</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer requestBody<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer requestContent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        发送</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestLine<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"HTTP1.1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestHeader<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"HOST: www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        requestContent<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>requestLine<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>requestContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>requestContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        接收</span>        InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//   响应行</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer responseLine<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    响应头</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer responseHeader<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    响应体</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer responseBody<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    返回的html文本</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer responseHtml<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer responseContent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        发送</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseLine<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseHeader<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Expires: Sat, 22 Aug 2020 09:11:38 GMT"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Server: BWS/1.1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseHtml<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello World!!&lt;h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseContent<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>responseLine<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>responseHeader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>responseHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>responseContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        接收</span>        InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="HTTP解决了哪些问题，以及使用场景"><a href="#HTTP解决了哪些问题，以及使用场景" class="headerlink" title="HTTP解决了哪些问题，以及使用场景"></a>HTTP解决了哪些问题，以及使用场景</h1><ul><li><p>解决的问题</p><p>HTTP协议制定了传输数据的统一标准，使得数据传输简单、灵活、易于扩展。</p><ul><li><p>优点</p><ul><li><p>灵活：HTTP允许传输任意类型的数据对象。</p></li><li><p>无状态：是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，在服务器不需要先前信息时它的应答就较快。也可能导致每次连接传送的数据量增大。</p></li><li><p>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p></li></ul></li></ul></li><li><p>使用场景</p><ul><li>一般用在c/s模式</li><li>如今也用在微服务之间的通讯调用。如feign，HTTPClient</li></ul></li></ul><h1 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h1><ul><li>通信使用明文（不加密），内容可能会被窃听。</li><li>由于HTTP是基于TCP/IP的，必须经过三次握手，四次挥手的过程。因此会比较慢一些。</li><li>对于微服务系统而言，当我们对业务需求的响应速度要求较高的时候，例如高不发项目。HTTP（这里是1.X版本而言）解析是基于文本，因此效率对大大降低。因此很多RPC框架采用自定义的通讯协议。</li></ul><h1 id="RPC（拓展）"><a href="#RPC（拓展）" class="headerlink" title="RPC（拓展）"></a>RPC（拓展）</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务。</p><h2 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h2><p><img src="https://gitee.com/silent-666/images/raw/22fa3323d4352c1a65cca5757eb434a7e44e753b/HTTP%E8%AF%B7%E6%B1%82/RPC%E8%B0%83%E7%94%A8%E5%8E%9F%E7%90%86.png" alt="RPC原理图"></p><ul><li>function 客户端的对象函数。</li><li>stub 代理对象。</li><li>socket 套接字。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RPC是一种概念模型，只要是实现可远程的调用就是RPC。HTTP的传输调用就是一种RPC。区别就是RPC可以不用HTTP协议，可以自定义传输协议。目的就是为了实现更高效的调用。例如谷歌的gRPC框架。它的协议是采用HTTP2，HTTP2相较于HTTP先前版本采用文本协议的格式解析的优势是采用了二进制格式进行解析。速度更快。同时对hearder进行了压缩。</p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频（四）</title>
      <link href="/2020/07/14/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2020/07/14/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Collection-和-Collections-有什么区别？"><a href="#一、Collection-和-Collections-有什么区别？" class="headerlink" title="一、Collection 和 Collections 有什么区别？"></a>一、Collection 和 Collections 有什么区别？</h1><ul><li>java.util.Collection 是一个<strong>集合接口</strong>。它提供了对集合对象进行基本操作的通用接口方法。List之类的。</li><li>java.util.Collections 是一个包装类。它包含有各种有关集合操作的<strong>静态多态方法</strong>。此类<strong>不能实例化</strong>，就像一<strong>个工具类</strong>，服务于Java的Collection框架。</li></ul><h1 id="二、List、Set、Map-之间的区别是什么？"><a href="#二、List、Set、Map-之间的区别是什么？" class="headerlink" title="二、List、Set、Map 之间的区别是什么？"></a>二、List、Set、Map 之间的区别是什么？</h1><ul><li>List：有序集合，元素可重复</li><li>Set：不重复集合，LinkedHashSet按照插入排序，SortedSet可排序，HashSet无序</li><li>Map：键值对集合，存储键、值和之间的映射；Key无序，唯一；value 不要求有序，允许重复</li></ul><h2 id="三、如何决定使用-HashMap-还是-TreeMap？"><a href="#三、如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="三、如何决定使用 HashMap 还是 TreeMap？"></a>三、如何决定使用 HashMap 还是 TreeMap？</h2><p>如果你需要得到一个有序的结果时就应该使用TreeMap（因为HashMap中元素的排列顺序是不固定的）。除此之外，由于HashMap有更好的性能，所以大多不需要排序的时候我们会使用HashMap。</p><h1 id="四、守护线程是什么？"><a href="#四、守护线程是什么？" class="headerlink" title="四、守护线程是什么？"></a>四、守护线程是什么？</h1><ul><li>守护线程是程序运行的时候在后台提供一种通用服务的线程。所有用户线程停止，进程会停掉所有守护线程，退出程序。</li><li>Java中把线程设置为守护线程的方法：在 start 线程之前调用线程的 setDaemon(true) 方法。</li></ul><p>注意</p><ul><li>setDaemon(true) 必须在 start() 之前设置，否则会抛出IllegalThreadStateException异常，该线程仍默认为用户线程，继续执行</li><li>守护线程创建的线程也是守护线程</li><li>守护线程不应该访问、写入持久化资源，如文件、数据库，因为它会在任何时间被停止，导致资源未释放、数据写入中断等问题</li></ul><p>意义和应用场景</p><p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p><h2 id="五、sleep-和-wait-有什么区别？"><a href="#五、sleep-和-wait-有什么区别？" class="headerlink" title="五、sleep() 和 wait() 有什么区别？"></a>五、sleep() 和 wait() 有什么区别？</h2><ul><li>这两个方法来自不同的类分别是Thread和Object，sleep方法属于Thread类中的静态方法，wait属于Object的成员方法。</li><li><strong>sleep()</strong>是线程类（Thread）的方法，不涉及线程通信，调用时会暂停此线程指定的时间，但监控依然保持，<strong>不会释放对象锁</strong>，到时间<strong>自动恢复</strong>；<strong>wait()</strong>是Object的方法，用于线程间的通信，调用时会<strong>放弃对象锁</strong>，进入<strong>等待</strong>队列，待调用notify()/notifyAll()唤醒指定的线程或者所有线程，才进入对象锁定池准备获得对象锁进入运行状态。</li></ul><h1 id="六、线程的-run-和-start-有什么区别？"><a href="#六、线程的-run-和-start-有什么区别？" class="headerlink" title="六、线程的 run()和 start()有什么区别？"></a>六、线程的 run()和 start()有什么区别？</h1><p>调用 start() 方法是用来启动线程的，轮到该线程执行时，会自动调用 run()；直接调用 run() 方法，无法达到启动多线程的目的，相当于主线程线性执行 Thread 对象的 run() 方法。</p><h2 id="七、submit-和-execute-方法的区别"><a href="#七、submit-和-execute-方法的区别" class="headerlink" title="七、submit()和 execute()方法的区别"></a>七、submit()和 execute()方法的区别</h2><p><code>execute</code> 方法执行完成后没有返回值，而<code>submit</code>方法执行后有返回值</p><h1 id="八、synchronized底层实现"><a href="#八、synchronized底层实现" class="headerlink" title="八、synchronized底层实现"></a>八、synchronized底层实现</h1><p>首先锁对象的对象头会先关联到一个monitor的对象上，接着会执行一个<strong>monitorenter</strong>获取对象的所有权，此时monitor的进入数就会+1，当同一个线程进入时会再次+1，当执行<strong>monitorexitmonitor的进入数就会-1</strong>，直到为0的时候，才会被其他线程有，而这个过程要先判断是否有标志位ACC_SYNCHRONIZED，才回去调用这两个方法。</p><h1 id="九、synchronized锁升级的过程。"><a href="#九、synchronized锁升级的过程。" class="headerlink" title="九、synchronized锁升级的过程。"></a>九、synchronized锁升级的过程。</h1><ul><li>无锁</li><li>偏向锁</li><li>轻量级锁（自旋锁）</li><li>重量级锁</li></ul><p>首先是无锁状态，当一个线程执行，monitor的进入数就会+1，进入偏向锁，这个时候的对象头上有一个Mark word记录当前线程的ID。当第二个线程进行锁争夺的时候，就会升级为轻量级锁。当无锁状态是，栈帧中会创建一个Lock Record 空间来存储Mark word的拷贝，并且把Lock Record指向当前对象，接下来，Mark word会更新Lock Record，成功就说明加锁成功，失败则进入判断Mark word是否指向当前线程的栈帧，是则说明已经持有了对象锁，否者表示被其他线程占有，升级为重量级锁。</p><h1 id="十、ThreadLocal-是什么-有哪些使用场景"><a href="#十、ThreadLocal-是什么-有哪些使用场景" class="headerlink" title="十、ThreadLocal 是什么?有哪些使用场景?"></a>十、ThreadLocal 是什么?有哪些使用场景?</h1><ul><li><p>是什么：用来实现相同线程数据共享不同线程数据隔离的一个工具。变量在在线程间隔离，方法或类间共享的场景。</p></li><li><p>创建JDBC连接。</p></li></ul><h1 id="十一、什么是反射？"><a href="#十一、什么是反射？" class="headerlink" title="十一、什么是反射？"></a>十一、什么是反射？</h1><p>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。</p><h1 id="十二、什么是-java-序列化？什么情况下需要序列化？"><a href="#十二、什么是-java-序列化？什么情况下需要序列化？" class="headerlink" title="十二、什么是 java 序列化？什么情况下需要序列化？"></a>十二、什么是 java 序列化？什么情况下需要序列化？</h1><p>将 Java 对象转换成字节流的过程。当 Java 对象需要在网络上传输 或者 持久化存储到文件中时，就需要对 Java 对象进行序列化处理。</p><h1 id="十二、深拷贝和浅拷贝区别是什么？"><a href="#十二、深拷贝和浅拷贝区别是什么？" class="headerlink" title="十二、深拷贝和浅拷贝区别是什么？"></a>十二、深拷贝和浅拷贝区别是什么？</h1><ul><li><p>浅拷贝</p><p>当B拷贝了A的数据，且当B的改变导致A的改变，称B浅拷贝了A。本质是A堆内存的地址赋值给了B，A和B存储同一个地址。</p></li><li><p>深拷贝</p><p>当B拷贝了A的数据，且当B的改变不会导致A的改变时，此时叫B深拷贝了A，A和B分别指向不同的堆内存地址</p></li></ul><h1 id="十三、throw-和-throws-的区别"><a href="#十三、throw-和-throws-的区别" class="headerlink" title="十三、throw 和 throws 的区别"></a>十三、throw 和 throws 的区别</h1><ul><li><p>throw一般用在方法内</p></li><li><p>throws放在方法声明的时候，后面跟着可能抛出的异常。</p></li></ul><h1 id="十四、finalize"><a href="#十四、finalize" class="headerlink" title="十四、finalize"></a>十四、finalize</h1><p>是Object的一个方法，在GC回收该对象之前会先调用这个方法，做一些清理工作。</p><h1 id="十五、try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？"><a href="#十五、try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？" class="headerlink" title="十五、try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？"></a>十五、try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？</h1><ul><li><p>执行try catch，如有匹配异常在catch()里给return返回值赋值但不结束运行</p></li><li><p>执行finally的时候如果里面有return，则给返回值赋值并直接结束运行，不再执行catch()里的return。</p></li><li><p>如果里面没有return，执行完finally后执行catch()里的return的结束运行功能。</p></li></ul><h1 id="十六、302和301状态码的区别"><a href="#十六、302和301状态码的区别" class="headerlink" title="十六、302和301状态码的区别"></a>十六、302和301状态码的区别</h1><ul><li>302 表示临时性重定向。常用于页面跳转。</li><li>301是指永久性的移动，302是暂时性的，即以后还可能有变化</li></ul><h1 id="十七、time-wait状态"><a href="#十七、time-wait状态" class="headerlink" title="十七、time_wait状态"></a>十七、time_wait状态</h1><p>为实现TCP全双工连接的可靠释放</p><p>假设发起主动关闭的一方（client）最后发送的ACK在网络中丢失，由于TCP协议的重传机制，执行被动关闭的一方（server）将会重发其FIN，在该FIN到达client之前，client必须维护这条连接状态，也就说这条TCP连接所对应的资源（client方的local_ip,local_port）不能被立即释放或重新分配，直到另一方重发的FIN达到之后，client重发ACK后，经过2MSL时间周期没有再收到另一方的FIN之后，该TCP连接才能恢复初始的CLOSED状态。如果主动关闭一方不维护这样一个TIME_WAIT状态，那么当被动关闭一方重发的FIN到达时，主动关闭一方的TCP传输层会用RST包响应对方，这会被对方认为是有错误发生，然而这事实上只是正常的关闭连接过程，并非异常。</p><h1 id="十八、get-和-post-请求有哪些区别"><a href="#十八、get-和-post-请求有哪些区别" class="headerlink" title="十八、get 和 post 请求有哪些区别"></a>十八、get 和 post 请求有哪些区别</h1><p><strong>GET产生一个TCP数据包；POST产生两个TCP数据包。</strong></p><ul><li><p>GET</p><p>浏览器把 header和data一并发送出去</p></li><li><p>POST</p><p>浏览器先发送header，服务器响应100 continue，浏览器再发送data</p></li></ul><h1 id="二十、Spring"><a href="#二十、Spring" class="headerlink" title="二十、Spring"></a>二十、Spring</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>把程序代码直接创建对象的控制权交给容器管理，通过容器来实现对对象组件的装配和管理。控制反转把对象的控制权转移，从程序代码本身转移到外部容器。降低了耦合度。</p><h2 id="Spring的作用域有哪些"><a href="#Spring的作用域有哪些" class="headerlink" title="Spring的作用域有哪些"></a>Spring的作用域有哪些</h2><ul><li>singleton 单例</li><li>prtotype 原型， 会返回一个新的实例，默认的</li><li>request 每次Http请求创建一个bean</li><li>session ，相同session共享一个bean。不同session创建不同的bean</li><li>golbalSession 全局session共享一个bean</li></ul><h1 id="SpringIOC原理"><a href="#SpringIOC原理" class="headerlink" title="SpringIOC原理"></a>SpringIOC原理</h1><p>解析XML里面bean配置的对象，放到HashMap中，遍历HashMap的对象，通过java的反射机制创建实例对象。</p><h2 id="Spring自动装配"><a href="#Spring自动装配" class="headerlink" title="Spring自动装配"></a>Spring自动装配</h2><ul><li>no – 缺省情况下，自动配置是通过“ref”属性手动设定 </li><li>byName-根据bean的属性名称进行自动装配。</li><li>byType-根据bean的类型进行自动装配。</li><li>constructor如果正好有一个与bean与构造器参数类型相同可以自动装配，否则会导致异常。</li><li>autodetect-如果有默认的构造器，则通过constructor方式进行自动装配，否则使用byType方式进行自动装配。</li></ul><h2 id="spring-事务实现方式有哪些？"><a href="#spring-事务实现方式有哪些？" class="headerlink" title="spring 事务实现方式有哪些？"></a>spring 事务实现方式有哪些？</h2><ul><li>TransactionTemplate实现</li><li>在XML中配置事务管理器transactionManager</li><li>AOP</li></ul><h2 id="spring的传播行为"><a href="#spring的传播行为" class="headerlink" title="spring的传播行为"></a>spring的传播行为</h2><p>当一个方法调用另一个方法时，事务会采取不同的策略工作</p><ul><li>如果有事务就沿用该事务，否则创建新事务。</li><li>如果有事务就沿用该事务，否则以无事务执行。</li><li>如果有事务就沿用该事务，没有这抛出异常。</li><li>无论有无事务都会创建新事务。</li><li>如果有事务，则挂起事务，否则以无事务运行。</li><li>如果有事务则抛出异常，否则以无事务运行。</li><li>如果有事务就再事务中嵌套事务，否则创建新事务。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day01</title>
      <link href="/2020/07/11/day01/"/>
      <url>/2020/07/11/day01/</url>
      
        <content type="html"><![CDATA[<h1 id="一、剑指-Offer-03-找出数组中重复的数字。"><a href="#一、剑指-Offer-03-找出数组中重复的数字。" class="headerlink" title="一、剑指 Offer 03.找出数组中重复的数字。"></a>一、剑指 Offer 03.找出数组中重复的数字。</h1><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><p>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用HashSet的add方法判断重复。</p><h1 id="二、剑指-Offer-05-替换空格"><a href="#二、剑指-Offer-05-替换空格" class="headerlink" title="二、剑指 Offer 05. 替换空格"></a>二、剑指 Offer 05. 替换空格</h1><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例 1：</p><p>输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>简单粗暴的用replace</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>用StringBuffer或者StringBuild</p><h1 id="三、剑指-Offer-06-从尾到头打印链表"><a href="#三、剑指-Offer-06-从尾到头打印链表" class="headerlink" title="三、剑指 Offer 06. 从尾到头打印链表"></a>三、剑指 Offer 06. 从尾到头打印链表</h1><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p><strong>示例 1：</strong></p><pre class=" language-java"><code class="language-java">输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>放进ArrayList中倒序取出。</p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频（三）</title>
      <link href="/2020/07/08/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/07/08/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一、你了解数据结构中的HashMap么？能跟我聊聊他的结构和底层原理么？"><a href="#一、你了解数据结构中的HashMap么？能跟我聊聊他的结构和底层原理么？" class="headerlink" title="一、你了解数据结构中的HashMap么？能跟我聊聊他的结构和底层原理么？"></a>一、你了解数据结构中的HashMap么？能跟我聊聊他的结构和底层原理么？</h1><ul><li>结构：数组加链表，数组存放kv键值对的实例，叫Entry。头插法。</li><li>HashMap的扩容机制：数组容量是有限的，数据多次插入的，到达一定的数量就会进行扩容，也就是resize。达到HashMap当前长度*负载因子，默认值0.75f进行扩容。</li><li>扩容：<ul><li>创建一个新的Entry空数组，长度是原数组的2倍。</li><li>ReHash：遍历原Entry数组，把所有的Entry重新Hash到新数组。</li></ul></li></ul><p>1.为什么要重新Hash呢，直接复制过去不香么？</p><p>是因为长度扩大以后，Hash的规则也随之改变。Hash的公式—&gt; index = HashCode（Key） &amp; （Length - 1）为2.为啥之前用头插法，java8之后改成尾插了呢？</p><p>当resize过程中，由于是单链表头插法，这个时候同一条Entry链上的元素会重新计算索引位置，这个就可能造成在同一条链上的元素放在了新数组的不同位置上，这个时候就可能形成环形链表。当再去get的时候就会出现无限循环。而使用尾插法扩容时不会改变链表元素原本的顺序。</p><p>3.你知道HashMap的默认初始化长度为啥是16么？</p><p>JDK1.8的源码中有一个1&lt;&lt;4=16,这样运算效率更快。只要是2的n次幂就可以，index的计算公式：index = HashCode（Key） &amp; （Length- 1），假设是16，那么16-1=15，15的二进制是1111，进行位与运算时，就可以取得后几位。只要输入的HashCode本身分布均匀，Hash算法的结果就是均匀的。这是为了<strong>实现均匀分布</strong>。</p><h1 id="二、HashMap在多线程环境下存在线程安全问题，那你一般都是怎么处理这种情况的？"><a href="#二、HashMap在多线程环境下存在线程安全问题，那你一般都是怎么处理这种情况的？" class="headerlink" title="二、HashMap在多线程环境下存在线程安全问题，那你一般都是怎么处理这种情况的？"></a>二、HashMap在多线程环境下存在线程安全问题，那你一般都是怎么处理这种情况的？</h1><ul><li><p>使用Collections.synchronizedMap(Map)创建线程安全的map集合；</p></li><li><p>Hashtable</p></li></ul><p>  <strong>这是因为HashTable使用的是安全失败机制</strong>：使你此次读到的数据不一定是最新的数据。</p><ul><li>ConcurrentHashMap</li></ul><p>出于线程并发度的原因，我都会舍弃前两者使用最后的ConcurrentHashMap，他的性能和效率明显高于前两者。</p><p>1.你还能说出一些Hashtable 跟HashMap不一样点么？</p><p>Hashtable是用synchronized锁住的不利于并发。而Hashtable的键值不允许空值，HashMap可以。查看源码HashTable在put的时候，如果是null会报空指针异常。而HashMap做了一个三元判断，如果为空就等于0。</p><p><strong>快速失败（fail—fast）</strong></p><p>迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。</p><p>2.ConcurrentHashMap原理</p><p>ConcurrentHashMap 底层是基于 <code>数组 + 链表</code></p><ul><li>JDK1.7是由Segment数组，HashEntry组成。HashEntry和HashMap，但是HashEntry用volatile修饰了value和下一个节点next。采用了分段锁的技术。Segment继承与ReentrantLock。理论上ConcurrentHashMap是支持Segment数组数量的线程并发。每到一个线程占用一个锁访问一个Segment，不会影响到其他的Segment。put操作时尝试自旋获取锁。如果获取达到一定的次数，改为阻塞获取。get操作。只需要将Key通过Hash定位到具体的Segment，在hash定位到具体元素上。olatile 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值。缺点：因为基本上还是数组加链表的方式，我们去查询的时候，还得遍历链表，会导致效率很低。</li><li>JDK1.8底层基于CAS + synchronized来保证并发安全性。也把之前的HashEntry改成了Node，但是作用不变，把值和next采用了volatile去修饰，保证了可见性，并且也引入了红黑树，在链表大于一定值的时候会转换（默认是8）。</li></ul><ol><li>根据 key 计算出 hashcode 。</li><li>判断是否需要进行初始化。</li><li>即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li><li>如果当前位置的 <code>hashcode == MOVED == -1</code>,则需要进行扩容。</li><li>如果都不满足，则利用 synchronized 锁写入数据。</li><li>如果数量大于 <code>TREEIFY_THRESHOLD</code> 则要转换为红黑树。</li></ol><h1 id="三、CAS性能很高，但是我知道synchronized性能可不咋地，为啥jdk1-8升级之后反而多了synchronized？"><a href="#三、CAS性能很高，但是我知道synchronized性能可不咋地，为啥jdk1-8升级之后反而多了synchronized？" class="headerlink" title="三、CAS性能很高，但是我知道synchronized性能可不咋地，为啥jdk1.8升级之后反而多了synchronized？"></a>三、CAS性能很高，但是我知道synchronized性能可不咋地，为啥jdk1.8升级之后反而多了synchronized？</h1><p>synchronized之前一直都是重量级的锁，但是后来java官方是对他进行过升级的，他现在采用的是锁升级的方式去做的。就是先使用<strong>偏向锁</strong>优先同一线程然后再次获取锁，如果失败，就升级为 <strong>CAS 轻量级锁</strong>，如果失败就会短暂<strong>自旋</strong>，防止线程被系统挂起。最后如果以上都失败就升级为<strong>重量级锁</strong>。</p><h1 id="四、你知道MySQL的基本架构么？好的那我们按照顺序了解下"><a href="#四、你知道MySQL的基本架构么？好的那我们按照顺序了解下" class="headerlink" title="四、你知道MySQL的基本架构么？好的那我们按照顺序了解下"></a>四、你知道MySQL的基本架构么？好的那我们按照顺序了解下</h1><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><p>我们要进行查询，第一步就是先去链接数据库，那这个时候就是连接器跟我们对接。负责跟客户端建立链接、获取权限、维持和管理连接。连接的时候会经过TCP握手，然后身份验证，然后我们输入用户名密码就好了。</p><p>怎么查看空闲连接列表？</p><p><strong>show processlist</strong>，下图就是我在自己的数据库表执行命令的结果，其中的Command列显示为<strong>Sleep</strong>的这一行，就表示现在系统里面有一个空闲连接。这里需要注意的是，我们数据库的客户端太久没响应，连接器就会自动断开了，这个时间参数是<strong>wait_timeout</strong>控制住的，默认时长为8小时。</p><p>解决：</p><p>执行比较大的一个查询后，执行<strong>mysql_reset_connection</strong>可以重新初始化连接资源。这个过程相比上面一种会好点，不需要重连，但是会初始化连接的状态。</p><h2 id="MySQL的查询缓存"><a href="#MySQL的查询缓存" class="headerlink" title="MySQL的查询缓存"></a>MySQL的查询缓存</h2><p>MySQL拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。同一条语句在MySQL执行两次，第一次和后面的时间是不一样的，后者明显快一些，这就是因为缓存的存在。</p><p>缓存的失效很容易，只要对表有任何的更新，这个表的所有查询缓存就会全部被清空，就会出现缓存还没使用，就直接被清空了，或者积累了很多缓存准备用来着，但是一个更新打回原形。可以显示调用，把<strong>query_cache_type</strong>设置成为DEMAND，这样SQL默认不适用缓存，想用缓存就用SQL_CACHE。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>在缓存没有命中的情况下，就开始执行语句了，你写的语句有没有语法错误，这是接下来MySQL比较关心的点。</p><p>那他会怎么做呢？会先做<strong>词法分析</strong>，你的语句有这么多单词、空格，MySQL就需要识别每个字符串所代表的是什么，是关键字，还是表名，还是列名等等。然后就开始<strong>语法分析</strong>，根据词法分析的结果，语法分析会判断你sql的对错，错了会提醒你的，并且会提示你哪里错了。</p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a><strong>优化器</strong></h2><p>优化就比较简单了，因为我们建立表可能会建立很多索引，优化有一步就是要确认使用哪个索引，比如使用你的主键索引，联合索引还是什么索引更好。</p><p>还有就是对执行顺序进行优化，条件那么多，先查哪个表，还是先关联，会出现很多方案，最后由优化器决定选用哪种方案。最后就是执行了，执行就交给执行器去做。</p><h1 id="事务隔离级别和MVCC的关系"><a href="#事务隔离级别和MVCC的关系" class="headerlink" title="事务隔离级别和MVCC的关系"></a>事务隔离级别和MVCC的关系</h1><ul><li><code>读未提交（READ UNCOMMITTED）</code>：一个事务还没提交时，它做的变更就能被别的事务看到。</li><li><code>读已提交（READ COMMITTED）</code>：一个事务提交之后，它做的变更才会被其他事务看到。</li><li><code>可重复读（REPEATABLE READ）</code>：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li><code>串行化（SERIALIZABLE）</code>：对于同一行记录，“写”会加“写锁”，“读”会加“读锁”，当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p><code>脏读（dirty read）</code>：如果一个事务读到了另一个未提交事务修改过的数据（一般发生在<code>读未提交（READ UNCOMMITTED）</code>）</p><p><code>幻读（phantom read）</code>：如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。</p><p>如何设置事务的隔离级别？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">GLOBAL</span><span class="token operator">|</span><span class="token keyword">SESSION</span><span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> level<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等级就是上面的几种</span></code></pre><p>读已提交和可重复读的原理</p><p>版本链</p><p>每行数据也都是有多个版本的，每次事务更新数据的时候，都会生成一个新的数据版本，并且把<code>transaction id</code>赋值给这个数据版本的事务ID</p><p>readview</p><p>readview中有m_ids，用来存储版本链中活跃的transaction id</p><p>大家可以用这个命令去看看自己公司或者自己现在使用的数据库的隔离级别：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> variables </code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频（二）</title>
      <link href="/2020/07/06/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/07/06/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一、常见的垃圾回收算法"><a href="#一、常见的垃圾回收算法" class="headerlink" title="一、常见的垃圾回收算法"></a>一、常见的垃圾回收算法</h1><ul><li><p>引用计数算法</p><p>在对象中添加一个引用计数器，每当有一个地方引用它，计数器值就加1，当引用失效时，计数器值减1.任何时刻计数器为零的对象就是不可能再被使用的。缺点：比如两个对象相互引用，但是实际上两个对象已经不可能再被访问，这样导致引用的计数器不为0引用计数器算法无法回收。</p></li></ul><ul><li><p>标记清除算法</p><p>首先标记出所有需要回收的对象。标记完成后，统一回收所有被标记的对象。缺点：</p><ul><li>执行效率不稳定，如果堆中存在大量对象，这时就必须大量标记和清除的动作。执行效率随着对象数量的增多而降低</li><li>内存空间碎片化，标记清除后会产生大量不连续的内存碎片，碎片多时，可能导致需要分配较大对象是无法找到足够的连续内存。这是就不得不触发另一次的标记清除。</li></ul></li><li><p>标记复制算法（复制算法）</p><p>内存按容量分为大小相等的两块。每次使用其中一块，其中一块内存用完，就将还存活的对象复制到另一块上。把使用过的一次性清除。缺点：如何大量对象是存活的，就会造成大量的内存间复制开销。可用的内存空间缩小为原来的一半，空间浪费太多。</p></li><li><p>标记整理算法</p><p>标记过程与标记清除算法一样，但是后续不是直接对可回收对象进行清除，而是让所有存活对象都向内存空间一端移动，然后清除掉边界以外的内存。</p></li></ul><h1 id="二、JVM垃圾回收的时候如何确定垃圾-是否知道什么是-GC-Roots"><a href="#二、JVM垃圾回收的时候如何确定垃圾-是否知道什么是-GC-Roots" class="headerlink" title="二、JVM垃圾回收的时候如何确定垃圾?是否知道什么是 GC Roots"></a>二、JVM垃圾回收的时候如何确定垃圾?是否知道什么是 GC Roots</h1><ul><li><p>确定垃圾</p><ul><li><p>引用计数算法</p></li><li><p>可达性分析算法</p><p>从GC Roots开始，根据引用关系向下搜索，如果某个对象到GC Roots没有任何引用的链相连。就是从GC  Roots到这个对象不可达。则证明此对象不可能在被使用。</p></li></ul></li><li><p>可作为GC Roots的对象</p><ul><li><p>虚拟机栈中引用的对象，各个线程被调用到的方法堆栈中使用的参数，局部变量，临时变量。</p></li><li><p>方法区中类静态属性引用的对象。</p></li><li><p>方法区中常量引用的对象。</p></li><li><p>本地方法栈中引用的对象。</p></li></ul></li></ul><h1 id="三、你说你做过JVM调优和参数配置，请问如何盘点查看MM系统默认值"><a href="#三、你说你做过JVM调优和参数配置，请问如何盘点查看MM系统默认值" class="headerlink" title="三、你说你做过JVM调优和参数配置，请问如何盘点查看MM系统默认值"></a>三、你说你做过JVM调优和参数配置，请问如何盘点查看MM系统默认值</h1><p>JVM的参数类型</p><ul><li><p>标配参数</p><ul><li><p>-version</p></li><li><p>-help</p></li><li><p>-showversion</p></li></ul></li></ul><ul><li><p>X参数</p><ul><li>-Xint：解释执行</li><li>-Xcomp：第一次使用就编译成本地代码</li><li>-Xmixed：混合模式</li></ul></li><li><p>XX参数</p><ul><li>Boolean类型：-XX：+或者-  某个属性值。+表示开启-表示关闭，例子：-XX：+PrintGCDetails</li><li>KV设值类型: -XX：属性key=属性值value.-XX:MetaspaceSize=128m</li></ul></li><li><p>jinfo举例，如何查看当前运行程序的配置,jinfo -flag 配置项 进程编号</p></li><li><p>两个经典参数：-Xms等价于 -XX:InitialHeapSize和-Xmx等价于-XX:MaxHeapSize</p></li><li><p>查看JVM默认值</p><ul><li>查看初始默认值:-XX:+PrintFlagsInitial</li><li>主要查看修改更新:-XX:+PrintFlagsFinal</li><li>-XX:+PrintCommandLineFlags</li></ul></li></ul><h1 id="四、你平时工作用过的M常用基本配置参数有哪些"><a href="#四、你平时工作用过的M常用基本配置参数有哪些" class="headerlink" title="四、你平时工作用过的M常用基本配置参数有哪些?"></a>四、你平时工作用过的M常用基本配置参数有哪些?</h1><ul><li>-Xms：初始大小内存，默认为物理内存1/64 ,,等价于-XX：InitialHeapSize</li><li>-Xmx: 最大分配内存，默认为物理内存1/4,等价于-XX:MaxHeapSize</li><li>-Xss: 设置单个线程的大小，一般默认为512K~1024K,等价于-XX:ThreadStackSize</li><li>-Xmn:设置年轻代大小</li><li>-XX:MetaspaceSize:设置元空间大小</li><li>-XX:+PrintGCDetails:输出详细GC收集日志信息</li><li>-XX:SurvivorRatio:设置新生代中eden和s0/s1的空间比例。-XX:SurvivorRatio=8（默认）</li><li>-XX:NewRatio：设置新生代和老年代在对结构的比例，默认-XX:NewRatio=2</li><li>-XX:MaxTenuringThreshold：设置垃圾最大年龄</li></ul><h1 id="五、强引用、软引用、弱引用、虚引用分别是什么"><a href="#五、强引用、软引用、弱引用、虚引用分别是什么" class="headerlink" title="五、强引用、软引用、弱引用、虚引用分别是什么?"></a>五、强引用、软引用、弱引用、虚引用分别是什么?</h1><ul><li><p>强引用</p><p>当<strong>内存空间不足</strong>时，<code>Java</code>虚拟机宁愿抛出<code>OutOfMemoryError</code>错误，使程序<strong>异常终止</strong>，也不会靠随意<strong>回收</strong>具有<strong>强引用</strong>的<strong>对象</strong>来解决内存不足的问题。</p></li><li><p>软引用</p><p>如果一个对象只具有<strong>软引用</strong>，则<strong>内存空间充足</strong>时，<strong>垃圾回收器</strong>就<strong>不会</strong>回收它；如果<strong>内存空间不足</strong>了，就会<strong>回收</strong>这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p><pre class=" language-java"><code class="language-java">SoftReference<span class="token operator">&lt;</span>String<span class="token operator">></span> softReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>弱引用<br>  一旦发现了只具有<strong>弱引用</strong>的对象，不管当前<strong>内存空间足够与否</strong>，都会<strong>回收</strong>它的内存。不过，由于垃圾回收器是一个<strong>优先级很低的线程</strong>，因此<strong>不一定</strong>会<strong>很快</strong>发现那些只具有<strong>弱引用</strong>的对象。</p><pre class=" language-java"><code class="language-java">  WeakReference<span class="token operator">&lt;</span>String<span class="token operator">></span> weakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>虚引用</p><p>  <strong>虚引用</strong>顾名思义，就是<strong>形同虚设</strong>。与其他几种引用都不同，<strong>虚引用</strong>并<strong>不会</strong>决定对象的<strong>生命周期</strong>。如果一个对象<strong>仅持有虚引用</strong>，那么它就和<strong>没有任何引用</strong>一样，在任何时候都可能被垃圾回收器回收。虚引用必须和引用队列(ReferenceQueue)联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p><pre class=" language-java"><code class="language-java">  ReferenceQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 创建虚引用，要求必须与一个引用队列关联</span>  PhantomReference pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h1 id="六、请谈谈你对ooM的认识"><a href="#六、请谈谈你对ooM的认识" class="headerlink" title="六、请谈谈你对ooM的认识"></a>六、请谈谈你对ooM的认识</h1><ul><li>Java.lang.StackOverflowError堆栈溢出，比如递归调用</li><li>Java.lang.OutOfMemoryError:Java heap space堆空间不足</li><li>Java.lang.OutOfMemeoryError:GC overhead limit exceeded当GC回收的空间很小，大部分没被回收，回收多次依旧如此，则抛出异常</li><li>Java.lang.OutOfMemeoryError:Direct buffer memory当堆外内存被打满</li><li>Java.lang.OutOfMemeoryError:unable to create new native thread线程数过多。</li><li>Java.lang.OutOfMemeoryError:Metaspace元空间被打满</li></ul><p>七、G垃圾回收算法和垃圾收集器的关系?分别是什么请你谈谈</p><ul><li>4种主要垃圾收集器<ul><li>串行垃圾回收器（Serial）它为单线程环境设计并且只使用一个线程进行垃圾回收，会暂停所有的用户线程。所以不适合服务器环境</li><li>并行垃圾回收器（Parallel）多个垃圾回收线程并行工作，此时用户线程是暂停的，适用于科学计算/大数据处理等弱交互场景</li><li>并发垃圾回收器（CMS）用户线程和垃圾收集线程同时执行（不一定是并行，可能交替执行），不需要停顿用户线程互联网公司多用它，适用于对响应时间有要求的场景</li><li>G1垃圾回收器：G1垃圾回收器将堆内存分割成不同的区域然后并发的对其进行垃圾回收</li></ul></li></ul><h1 id="八、并发标记清除GC-CMS-原理"><a href="#八、并发标记清除GC-CMS-原理" class="headerlink" title="八、并发标记清除GC(CMS)原理"></a>八、并发标记清除GC(CMS)原理</h1><p>仅作用于老年代</p><p>分为四个步骤</p><ul><li>初始标记(CMS initial mark)：标记CG ROOTS能直接关联的对象。速度很快，仍然需要暂停所有工作线程。</li><li>并发标记(CMS concurrent mark)：遍历初始标记的存活对象，继续标记这些对象的可达对象，与工作线程并发执行不需要暂停。</li><li>重新标记（CMS remark)：修正并发标记期间因用户程序运行导致标志对象发生变化的那一部分对象。这个阶段也会发生暂停。</li><li>并发清除(CMS concurrent sweep)：和工作线程一起，清除这些标记对象。这个过程会产生内存碎片。</li></ul><h1 id="九、G1收集器"><a href="#九、G1收集器" class="headerlink" title="九、G1收集器"></a>九、G1收集器</h1><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul><p>自定义停顿时间。</p><h2 id="十、类加载过程"><a href="#十、类加载过程" class="headerlink" title="十、类加载过程"></a>十、类加载过程</h2><ul><li>加载：在内存创建一个java.lang.Class对象，作为各种数据的入口</li><li>验证：验证Clss字节流中是否符合虚拟机的要求，是否会对虚拟机造成危害</li><li>准备：为类变量创建内存空间并赋初始化值</li><li>解析：将常量池中的符号引用替换为直接引用的过程</li><li>初始化：会执行个<client>的方法，这个方法会自动收集类变量的赋值和静态代码块。如果该类没有用到静态变量的赋值和静态代码块就不会为此创建此方法。</client></li><li>使用</li><li>卸载</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频题</title>
      <link href="/2020/07/02/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E9%A2%98/"/>
      <url>/2020/07/02/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="一、谈谈你对volatile的理解"><a href="#一、谈谈你对volatile的理解" class="headerlink" title="一、谈谈你对volatile的理解"></a>一、谈谈你对volatile的理解</h1><p>1.volatile是java虚拟机提供的轻量级的同步机制。</p><p>特点：</p><ul><li><p>保证可见性</p></li><li><p>不保证原子性</p><p>number++在多线程下是非线程安全的，如何不加synchronized解决</p><ul><li><p>线程不安全：nunber++在汇编底层是有三个操作得到值，赋值，加一。</p></li><li><p>解决方案：使用原子整型类AtomicInteger中的getAndDecrement()替换。</p></li></ul></li><li><p>禁止指令重排</p><p>底层编译器优化时，如何代码之间没有数据依赖性，可能会进行指令重排，在多线程中可能会造成不可预期的结果。</p></li></ul><p>2.JMM是什么</p><p>JMM是java的内存模型，本身是一种抽象的概念 并不真实存在,它描述的是一组规则或规范通过规范定制了程序中各个变量(包括实例字段,静态字段和构成数组对象的元素)的访问方式.</p><p>JMM关于同步规定:</p><ul><li>线程解锁前，必须把共享变量的值刷新回主内存</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li><li>加锁解锁是同一把锁。</li></ul><p>3.你在哪些地方用到过volatile?</p><ul><li><p>单例模式DCL代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SingleDemo</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    防止加塞，创建这个对象的过程应该是个原子性</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> SingleDemo instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"构造方法创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    双重检验机制</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleDemo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingleDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>public class BaseStudy08 {    public static void main(String[] args)  {        for (int i = 0; i &lt; 5; i++) {            new Thread(()-&gt;{                System.out.println(SingleDemo.getInstance());                System.out.println(SingleDemo.getInstance());                System.out.println(SingleDemo.getInstance());                },&quot;t1&quot;).start();        }    }}</code></pre></li></ul><h1 id="二、你知道CAS吗"><a href="#二、你知道CAS吗" class="headerlink" title="二、你知道CAS吗"></a>二、你知道CAS吗</h1><p>1.cas比较并交换</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy09</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.CAS底层原理?如果知道,谈谈你对UnSafe的理解</p><p>由于Java 方法无法直接访问底层 ,需要通过本地(native)方法来访问,UnSafe相当于一个后面,基于该类可以直接操作特额定的内存数据.UnSafe类在于sun.misc包中,其内部方法操作可以像C的指针一样直接操作内存,因为Java中CAS操作的助兴依赖于UNSafe类的方法.<br>注意UnSafe类中所有的方法都是native修饰的,也就是说UnSafe类中的方法都是直接调用操作底层资源执行响应的任务</p><p>3.CAS缺点</p><ul><li>循环时间长开销很大（自旋锁）</li><li>引起ABA问题</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一个线程执行速度快，将值操作两次</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//十秒后，第二线程发现主内存值，没变。就继续执行，变成true</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.ABA问题解决</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AtomicStampedReference<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stampedReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 第1次版本号"</span><span class="token operator">+</span>stamp<span class="token operator">+</span><span class="token string">"\t值是"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            stampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 第2次版本号"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t值是"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 第3次版本号"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t值是"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 第1次版本号"</span><span class="token operator">+</span>stamp<span class="token operator">+</span><span class="token string">"\t值是"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> stampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2019</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 修改成功否"</span><span class="token operator">+</span>result<span class="token operator">+</span><span class="token string">"\t最新版本号"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最新的值\t"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、我们知道ArrayList是线程不安全-请编写一个不安全的案例并给出解决方案"><a href="#三、我们知道ArrayList是线程不安全-请编写一个不安全的案例并给出解决方案" class="headerlink" title="三、我们知道ArrayList是线程不安全,请编写一个不安全的案例并给出解决方案"></a>三、我们知道ArrayList是线程不安全,请编写一个不安全的案例并给出解决方案</h1><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy11</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">300</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//出现java.util.ConcurrentModificationException错误</span></code></pre><p>解决方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy11</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        List&lt;String> list = Collections.synchronizedList(new ArrayList&lt;>());</span><span class="token comment" spellcheck="true">//        List&lt;String> list = new Vector&lt;>();</span>       List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">300</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.Collections.synchronizedList</span><span class="token comment" spellcheck="true">//2.Vector</span><span class="token comment" spellcheck="true">//3.CopyOnWriteArrayList</span></code></pre><h1 id="四、公平锁-非公平锁-可重入锁-递归锁-自旋锁谈谈你的理解-请手写一个自旋锁"><a href="#四、公平锁-非公平锁-可重入锁-递归锁-自旋锁谈谈你的理解-请手写一个自旋锁" class="headerlink" title="四、公平锁/非公平锁/可重入锁/递归锁/自旋锁谈谈你的理解?请手写一个自旋锁"></a>四、公平锁/非公平锁/可重入锁/递归锁/自旋锁谈谈你的理解?请手写一个自旋锁</h1><ul><li><p>公平锁<br>是指多个线程按照申请锁的顺序来获取锁类似排队打饭 先来后到</p></li><li><p>非公平锁<br>是指在多线程获取锁的顺序并不是按照申请锁的顺序,有可能后申请的线程比先申请的线程优先获取到锁,在高并发的情况下,有可能造成优先级反转或者饥饿现象</p></li><li><p>公平锁/非公平锁<br> 并发包ReentrantLock的创建可以指定构造函数的boolean类型来得到公平锁或者非公平锁 默认是非公平锁</p></li></ul><p>可重入锁(也叫做递归锁)</p><ul><li>指的是同一线程外层函数获得锁后,内层敌对函数任然能获取该锁的代码</li><li>在同一线程外层方法获取锁的时候,在进入内层方法会自动获取锁</li><li>也就是说,线程可以进入任何一个它已经标记的锁所同步的代码</li></ul><p>自旋锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy03</span> <span class="token punctuation">{</span>    AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        获取当前线程</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token string">"come in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        当前线程不为空则继续自旋判断</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            System.out.println(Thread.currentThread().getName()+":"+"正在尝试获取锁");</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//       获取当前线程</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        把当前线程设置为空</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token string">"myUnlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        BaseStudy03 baseStudy03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseStudy03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            baseStudy03<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>           baseStudy03<span class="token punctuation">.</span><span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            baseStudy03<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baseStudy03<span class="token punctuation">.</span><span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>读写锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    修改数据其他线程可见</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    读写锁或者共享锁</span>    <span class="token keyword">private</span> ReentrantReadWriteLock rwLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        读锁</span>        rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在写入:"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"写入完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            释放读锁</span>            rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        写锁</span>        rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在读取:"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            释放写锁</span>            rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        MyCache cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        创建五个线程用来写</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                   cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//          创建五个线程用来读</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="五、CountDownLatch-CyclicBarrier-Semaphore使用过吗？"><a href="#五、CountDownLatch-CyclicBarrier-Semaphore使用过吗？" class="headerlink" title="五、CountDownLatch/CyclicBarrier/Semaphore使用过吗？"></a>五、CountDownLatch/CyclicBarrier/Semaphore使用过吗？</h1><ul><li>CountDownLatch</li></ul><p>一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        CountDownLatch downLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"同学"</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">"离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                downLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        downLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"班长离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>CyclicBarrier</li></ul><p>一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier  point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier  在释放等待线程后可以重用，所以称它为<em>循环</em> 的 barrier。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        CyclicBarrier barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"召唤神龙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收集第"</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">"颗龙珠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Semaphore</li></ul><p>一个计数信号量。从概念上讲，信号量维护了一个许可集。如有必要，在许可可用前会阻塞每一个 <a href="../../../java/util/concurrent/Semaphore.html#acquire()"><code>acquire()</code></a>，然后再获取该许可。每个  <a href="../../../java/util/concurrent/Semaphore.html#release()"><code>release()</code></a>  添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，<code>Semaphore</code>  只对可用许可的号码进行计数，并采取相应的行动。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"停车三秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="六、线程池用过吗-ThreadPoolExecutor谈谈你的理解"><a href="#六、线程池用过吗-ThreadPoolExecutor谈谈你的理解" class="headerlink" title="六、线程池用过吗?ThreadPoolExecutor谈谈你的理解?"></a>六、线程池用过吗?ThreadPoolExecutor谈谈你的理解?</h1><ul><li><p>使用线程的优势</p><ul><li>降低资源消耗，线程复用</li><li>提高响应速度</li><li>提高线程的可管理性</li></ul></li><li><p>编码实现</p><ul><li>Executors.newFixedThreadPool(int)，执行一个长期的任务,性能好很多</li><li>Executors.newSingleThreadExecutor()，一个任务一个线程执行的任务场景</li><li>Executors.newCachedThreadPool()，适用:执行很多短期异步的小程序或者负载较轻的服务器</li></ul></li><li><p>底层实现</p><p>ThreadPoolExecutor，七大参数</p><ul><li>corePoolSize：线程池中的常驻核心线程数</li><li>maximumPoolSize：线程池能够容纳同时执行的最大线程数,此值大于等于1</li><li>keepAliveTime:多余的空闲线程存活时间,当空间时间达到keepAliveTime值时,多余的线程会被销毁直到只剩下corePoolSize个线程为止</li><li>unit:keepAliveTime的单位</li><li>workQueue:任务队列,被提交但尚未被执行的任务</li><li>threadFactory:表示生成线程池中工作线程的线程工厂,用户创建新线程,一般用默认即可</li><li>handler:拒绝策略,表示当线程队列满了并且工作线程大于等于线程池的最大显示 数(maxnumPoolSize)时如何来拒绝.<ul><li>实现RejectExecutionHandler接口<ul><li>AbortPolicy(默认):直接抛出RejectedException异常阻止系统正常运行</li><li>CallerRunPolicy:”调用者运行”一种调节机制,该策略既不会抛弃任务,也不会抛出异常,而是，给调用者执行</li><li>DiscardOldestPolicy:抛弃队列中等待最久的任务,然后把当前任务加入队列中尝试再次提交</li><li>DiscardPolicy:直接丢弃任务,不予任何处理也不抛出异常.如果允许任务丢失,这是最好的拒绝策略</li></ul></li></ul></li></ul></li></ul><p>你在工作中单一的/固定数的/可变你的三种创建线程池的方法,你用哪个多?超级大坑</p><p>答：一个都不用，参考阿里巴巴java开发手册，而是自定义ThreadPoolExecutor，FixedThreadPool和SingleThreadPool:允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</p><h1 id="合理配置线程池你是如何考虑的"><a href="#合理配置线程池你是如何考虑的" class="headerlink" title="合理配置线程池你是如何考虑的?"></a>合理配置线程池你是如何考虑的?</h1><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查看cpu核数</span></code></pre><ul><li>cpu密集型 ， cpu核数+1</li><li>IO密集型<ul><li>cpu核数*2</li><li>cpu核数/(1-阻塞系数（0.8~0.9）)</li></ul></li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>两个或两个以上的线程在执行过程中，因争夺资源而造成的一种相互等待的现象，若无外力干涉它们会陷入无限的等待。</p><ul><li>jps查看进程</li><li>jstack + 进程号</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各类锁</title>
      <link href="/2020/07/01/%E5%90%84%E7%B1%BB%E9%94%81/"/>
      <url>/2020/07/01/%E5%90%84%E7%B1%BB%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy03</span> <span class="token punctuation">{</span>    AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        获取当前线程</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token string">"come in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        当前线程不为空则继续自旋判断</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            System.out.println(Thread.currentThread().getName()+":"+"正在尝试获取锁");</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//       获取当前线程</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        把当前线程设置为空</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token string">"myUnlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        BaseStudy03 baseStudy03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseStudy03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            baseStudy03<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>           baseStudy03<span class="token punctuation">.</span><span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            baseStudy03<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baseStudy03<span class="token punctuation">.</span><span class="token function">myUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    修改数据其他线程可见</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    读写锁或者共享锁</span>    <span class="token keyword">private</span> ReentrantReadWriteLock rwLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        读锁</span>        rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在写入:"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"写入完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            释放读锁</span>            rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        写锁</span>        rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在读取:"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            释放写锁</span>            rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        MyCache cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        创建五个线程用来写</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                   cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//          创建五个线程用来读</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="CountDownLatch-CyclicBarrier-Semaphore"><a href="#CountDownLatch-CyclicBarrier-Semaphore" class="headerlink" title="CountDownLatch/CyclicBarrier/Semaphore"></a>CountDownLatch/CyclicBarrier/Semaphore</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        CountDownLatch downLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"同学"</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">"离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                downLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        downLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"班长离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier  point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier  在释放等待线程后可以重用，所以称它为<em>循环</em> 的 barrier。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        CyclicBarrier barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"召唤神龙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收集第"</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">"颗龙珠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>一个计数信号量。从概念上讲，信号量维护了一个许可集。如有必要，在许可可用前会阻塞每一个 <a href="../../../java/util/concurrent/Semaphore.html#acquire()"><code>acquire()</code></a>，然后再获取该许可。每个  <a href="../../../java/util/concurrent/Semaphore.html#release()"><code>release()</code></a>  添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，<code>Semaphore</code>  只对可用许可的号码进行计数，并采取相应的行动。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudy07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"停车三秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目总结</title>
      <link href="/2020/06/22/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/22/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h1><p>这是一个在线教育系统，分为前台网站系统和后台管理系统，B2C模式。</p><p>前台用户系统包括课程、讲师、问答、文章几大部分，使用了微服务技术架构，前后端分离开发。</p><p>后台管理系统包括：讲师管理、课程分类管理、课程管理、统计分析、Banner管理、订单管理、权限管理等功能。</p><p>后端的主要技术架构是：SpringBoot+SpringCloud+Mybatis-Plus+MySql+Maven+EasyExcel+nginx</p><p>前端的架构是：Node.js+Vue.js+element-ui+NUXT+ECharts</p><p>其他涉及到的中间件包括Redis，阿里云OSS，阿里云视频点播，阿里云的短信服务</p><p>使用了ECharts做图表展示，使用EasyExcel完成分类批量添加，注册分布式采用单点登录使用了JWT</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm整合</title>
      <link href="/2020/04/26/ssm%E6%95%B4%E5%90%88/"/>
      <url>/2020/04/26/ssm%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h1><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--过滤器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--监听器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h1 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h1><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsd    http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    配置要扫描注解的包路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        不扫描Controller的注解--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSourceTransactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务的通知--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置aop--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.study.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置一个数据库连接的配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>propertyPlaceholderConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.beans.factory.config.PropertyPlaceholderConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>location<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:Jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:Jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--配置数据库连接池--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置sqlSessionFactory，整合mybatis--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置持久层接口--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperScannerConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h1 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h1><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置使用注解时要扫描的位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置不拦截css，js，image等资源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启注解--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ssmstudy03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--进行版本锁定--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- log end --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- log end --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- log start --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2020/04/26/spring/"/>
      <url>/2020/04/26/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-的体系结构"><a href="#spring-的体系结构" class="headerlink" title="spring 的体系结构"></a>spring 的体系结构</h1><p><img src="https://gitee.com/silent-666/images/raw/c17a32cd8aa113bc737fccc8591895557bd7a41c/spring/1.jpg" alt></p><h1 id="springIOC"><a href="#springIOC" class="headerlink" title="springIOC"></a>springIOC</h1><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><ul><li>原来: 我们在获取对象时，都是采用 new 的方式。是主动的。 </li></ul><p><img src="https://gitee.com/silent-666/images/raw/c17a32cd8aa113bc737fccc8591895557bd7a41c/spring/2.jpg" alt></p><ul><li>现在： 我们获取对象时，同时跟工厂要，有工厂为我们查找或者创建对象。是被动的。 </li></ul><p><img src="https://gitee.com/silent-666/images/raw/c17a32cd8aa113bc737fccc8591895557bd7a41c/spring/3.jpg" alt></p><ul><li>这种被动接收的方式获取对象的思想就是控制反转，它是 spring 框架的核心之一。 </li></ul><h1 id="springAOP"><a href="#springAOP" class="headerlink" title="springAOP"></a>springAOP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>AOP：全称是 Aspect Oriented Programming 即：面向切面编程。简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的<br>基础上，对我们的已有方法进行增强。 </p><h2 id="AOP-的作用及优势"><a href="#AOP-的作用及优势" class="headerlink" title="AOP 的作用及优势"></a>AOP 的作用及优势</h2><ul><li>作用：在程序运行期间，不修改源码对已有方法进行增强。</li><li>优势<ul><li>减少重复代码</li><li>提高开发效率 </li><li>维护方便 </li></ul></li></ul><h2 id="AOP-的实现方式"><a href="#AOP-的实现方式" class="headerlink" title="AOP 的实现方式"></a>AOP 的实现方式</h2><ul><li>使用动态代理技术 </li></ul><h2 id="Spring的Bean实例化的过程"><a href="#Spring的Bean实例化的过程" class="headerlink" title="Spring的Bean实例化的过程"></a>Spring的Bean实例化的过程</h2><ul><li><p>类加载进虚拟机</p></li><li><p>遇到初始化代码</p><ul><li>解析包名</li><li>扫描包下的所有类</li><li>扫描类下的注解</li><li>创建BeanDefinition存储这些注解的信息</li></ul></li><li><p>把扫描到的多个BeanDefinition放到map</p><ul><li>判断是否单例，懒加载等等。</li><li>如果是单例就new对象放到单例池中。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2020/04/26/Mybatis/"/>
      <url>/2020/04/26/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybait一对一"><a href="#Mybait一对一" class="headerlink" title="Mybait一对一"></a>Mybait一对一</h1><h2 id="基于配置文件"><a href="#基于配置文件" class="headerlink" title="基于配置文件"></a>基于配置文件</h2><p>AccountDao.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.dao.AccountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>One<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.project.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.dao.UserDao.findById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>One<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *from account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>UserDao.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *from user where id= #{uid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h2><p>AccountDao接口中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select*from account"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"accountMap"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"money"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">,</span>one<span class="token operator">=</span><span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.study.dao.UserDao.findById"</span><span class="token punctuation">,</span>fetchType<span class="token operator">=</span> FetchType<span class="token punctuation">.</span>EAGER<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>UserDao接口中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select*from user where id=#{id}"</span><span class="token punctuation">)</span>    User <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Mybait一对多"><a href="#Mybait一对多" class="headerlink" title="Mybait一对多"></a>Mybait一对多</h1><h2 id="基于配置文件-1"><a href="#基于配置文件-1" class="headerlink" title="基于配置文件"></a>基于配置文件</h2><p>UserDao.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Two<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.project.Account<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.dao.AccountDao.findByUid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>AccountDao.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.dao.AccountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByUid<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.project.Account<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from account where uid=#{uid}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="基于注解-1"><a href="#基于注解-1" class="headerlink" title="基于注解"></a>基于注解</h2><p>UserDao接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select*from user"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"userMap"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.study.dao.AccountDao.findByUid"</span><span class="token punctuation">,</span>fetchType <span class="token operator">=</span> FetchType<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AccountDao接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select*from account where uid=#{uid}"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findByUid</span><span class="token punctuation">(</span>Integer uid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一对一一般采用立即加载，多对多或一对多采用延迟加载</p><h1 id="不采用依赖注入的方法"><a href="#不采用依赖注入的方法" class="headerlink" title="不采用依赖注入的方法"></a>不采用依赖注入的方法</h1><p>从Sql语句入手</p><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OneToOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select * from account as a left outer join user as u on a.uid=u.id;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OneToMany<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user as u left outer join account as a on u.id=a.uid;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ManyToMany<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select u.id as uid,u.name,u.password,r.* from role as r    left outer join user_role as ur on r.id=ur.rid    left outer join user as u  on u.id=ur.uid;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springmvc(二)</title>
      <link href="/2020/04/25/SpringMvc(%E4%BA%8C)/"/>
      <url>/2020/04/25/SpringMvc(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC框架提供的转发和重定向"><a href="#SpringMVC框架提供的转发和重定向" class="headerlink" title="SpringMVC框架提供的转发和重定向"></a>SpringMVC框架提供的转发和重定向</h2><h2 id="forward请求转发"><a href="#forward请求转发" class="headerlink" title="forward请求转发"></a>forward请求转发</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">return</span> <span class="token string">"forward:/user/findAll"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a>redirect重定向</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/count"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/add.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="异步ajax请求"><a href="#异步ajax请求" class="headerlink" title="异步ajax请求"></a>异步ajax请求</h2><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//封装进JavaBean</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> User <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAjax....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模拟请求数据库</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//绑定按钮</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token punctuation">:</span><span class="token string">"user/testAjax"</span><span class="token punctuation">,</span>                    contentType<span class="token punctuation">:</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">,</span>                    data<span class="token punctuation">:</span><span class="token string">'{"username":"Kobe","password":"123","age":30}'</span><span class="token punctuation">,</span>                    dataType<span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="需要导入的jar包"><a href="#需要导入的jar包" class="headerlink" title="需要导入的jar包"></a>需要导入的jar包</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="SpringMVC实现文件上传"><a href="#SpringMVC实现文件上传" class="headerlink" title="SpringMVC实现文件上传"></a>SpringMVC实现文件上传</h1><p><img src="https://gitee.com/silent-666/images/raw/e70b29dab84149f18e1ee44c97981f33c8705535/SpringMvc/4.jpg" alt="上传原理"></p><h2 id="SpringMVC传统上传方式"><a href="#SpringMVC传统上传方式" class="headerlink" title="SpringMVC传统上传方式"></a>SpringMVC传统上传方式</h2><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload1"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    传统上传方式</span>    <span class="token keyword">public</span> String <span class="token function">fileUpload1</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取要上传的文件路径</span>        String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文件</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断是否存在，不存在则创建</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建磁盘文件项工厂 </span>        DiskFileItemFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletFileUpload upload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 解析request对象 </span>        List<span class="token operator">&lt;</span>FileItem<span class="token operator">></span> items <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileItem item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 判断文件项是普通字段，还是上传的文件</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 上传文件项</span>                <span class="token comment" spellcheck="true">// 获取到上传文件的名称</span>                String filename <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                filename <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 删除临时文件 </span>                item<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="SpringMvc上传文件"><a href="#SpringMvc上传文件" class="headerlink" title="SpringMvc上传文件"></a>SpringMvc上传文件</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">fileUpload2</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取到上传文件的名称</span>        String filename <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filename <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上传文件 </span>        upload<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="配置文件解析器对象"><a href="#配置文件解析器对象" class="headerlink" title="配置文件解析器对象"></a>配置文件解析器对象</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置文件解析器对象，要求id名称必须是multipartResolver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="SpringMVC跨服务器方式文件上传"><a href="#SpringMVC跨服务器方式文件上传" class="headerlink" title="SpringMVC跨服务器方式文件上传"></a>SpringMVC跨服务器方式文件上传</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">fileUpload3</span><span class="token punctuation">(</span> MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"http://localhost:9000/uploads/"</span><span class="token punctuation">;</span>        String filename <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filename <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>        Client client <span class="token operator">=</span> Client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WebResource webResource <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>path <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        webResource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>upload<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="需要导入的jar包-1"><a href="#需要导入的jar包-1" class="headerlink" title="需要导入的jar包"></a>需要导入的jar包</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--      跨服务器上传需要的jar包--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.jersey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jersey-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.jersey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jersey-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="jsp代码"><a href="#jsp代码" class="headerlink" title="jsp代码"></a>jsp代码</h2><pre class=" language-jsp"><code class="language-jsp"><form action="user/fileupload3" method="post" enctype="multipart/form-data">     选择文件：<input type="file" name="upload"/><br/>     <input type="submit" value="上传文件"/></form></code></pre><h1 id="SpringMVC的异常处"><a href="#SpringMVC的异常处" class="headerlink" title="SpringMVC的异常处"></a>SpringMVC的异常处</h1><p><img src="https://gitee.com/silent-666/images/raw/e70b29dab84149f18e1ee44c97981f33c8705535/SpringMvc/3.jpg" alt="原理"></p><p> Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找异常处理器进 行异常的处理。 </p><h2 id="配置异常处理器"><a href="#配置异常处理器" class="headerlink" title="配置异常处理器"></a>配置异常处理器</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sysExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.exception.SysExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>自定义异常继承Exception</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SysException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实现类实现HandlerExceptionResolver接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionHandle</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> Object o<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SysException ex <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ex <span class="token operator">=</span> <span class="token punctuation">(</span>SysException<span class="token punctuation">)</span>e<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"系统正忙。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="SpringMVC框架中的拦截器"><a href="#SpringMVC框架中的拦截器" class="headerlink" title="SpringMVC框架中的拦截器"></a>SpringMVC框架中的拦截器</h1><p><img src="https://gitee.com/silent-666/images/raw/e70b29dab84149f18e1ee44c97981f33c8705535/SpringMvc/2.jpg" alt="原理"></p><ul><li><p>SpringMVC框架中的拦截器用于对处理器进行预处理和后处理的技术。 </p></li><li><p>可以定义拦截器链，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链 中的拦截器会按着定义的顺序执行。</p></li><li><p>拦截器和过滤器的功能比较类似，有区别 </p><ul><li>过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。 </li><li>拦截器是SpringMVC框架独有的。 </li><li>过滤器配置了/*，可以拦截任何资源。</li><li>拦截器只会对控制器中的方法进行拦截。 </li></ul></li><li><p>拦截器也是AOP思想的一种实现方式 </p></li><li><p>想要自定义拦截器，需要实现HandlerInterceptor接口</p></li></ul><h2 id="controller类"><a href="#controller类" class="headerlink" title="controller类"></a>controller类</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testInterceptor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SysException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Interceptor执行。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="实现HandlerInterceptor接口类"><a href="#实现HandlerInterceptor接口类" class="headerlink" title="实现HandlerInterceptor接口类"></a>实现HandlerInterceptor接口类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截。。。。。前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/error.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截....后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="配置拦截器类"><a href="#配置拦截器类" class="headerlink" title="配置拦截器类"></a>配置拦截器类</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 哪些方法进行拦截 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**/user/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 哪些方法不进行拦截          &lt;mvc:exclude-mapping path=""/>           --></span>          <span class="token comment" spellcheck="true">&lt;!-- 注册拦截器对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc(一)</title>
      <link href="/2020/04/24/SpringMvc(%E4%B8%80)/"/>
      <url>/2020/04/24/SpringMvc(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMvc框架执行流程"><a href="#SpringMvc框架执行流程" class="headerlink" title="SpringMvc框架执行流程"></a>SpringMvc框架执行流程</h1><p><img src="https://gitee.com/silent-666/images/raw/e70b29dab84149f18e1ee44c97981f33c8705535/SpringMvc/1.jpg" alt="框架执行流程"></p><h1 id="配置核心容器"><a href="#配置核心容器" class="headerlink" title="配置核心容器"></a>配置核心容器</h1><p>在web.xml中配置</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--过滤器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--监听器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 spring mvc 的核心控制器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVCDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置初始化参数，用于读取 SpringMVC 的配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 servlet 的对象的创建时间点：应用加载时创建。    取值只能是非 0 正整数，表示启动顺序 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVCDispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span> </code></pre><h1 id="配置springmvc-xml"><a href="#配置springmvc-xml" class="headerlink" title="配置springmvc.xml"></a>配置springmvc.xml</h1><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置使用注解时要扫描的位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置不拦截css，js，image等资源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启注解--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h1 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h1><h2 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="RequestParam注解"></a>RequestParam注解</h2><ul><li><p>作用：把请求中的指定名称的参数传递给控制器中的形参赋值 </p></li><li><p>属性 </p><ul><li>value：请求参数中的名称</li><li>required：请求参数中是否必须提供此参数，默认值是true，必须提供 </li></ul></li></ul><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="RequestBody注解"><a href="#RequestBody注解" class="headerlink" title="RequestBody注解"></a>RequestBody注解</h2><ul><li><p>作用：用于获取请求体的内容（注意：get方法不可以） </p></li><li><p>属性 </p><ul><li>required：是否必须有请求体，默认值是true </li></ul></li></ul><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="PathVariable注解"><a href="#PathVariable注解" class="headerlink" title="PathVariable注解"></a>PathVariable注解</h2><ul><li>作用：拥有绑定url中的占位符的。例如：url中有/delete/{id}，{id}就是占位符 </li><li>属性 :  value：指定url中的占位符名称 </li><li>Restful风格的URL <ul><li>请求路径一样，可以根据不同的请求方式去执行后台的不同方法 </li><li>restful风格的URL优点 <ul><li>结构清晰 </li><li>符合标准 </li><li>易于理解 </li><li>扩展方便 </li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="RequestHeader注解"><a href="#RequestHeader注解" class="headerlink" title="RequestHeader注解"></a>RequestHeader注解</h2><ul><li>作用：获取指定请求头的值 </li><li>属性   value：请求头的名称 </li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Accept"</span><span class="token punctuation">)</span> String header<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="CookieValue注解"></a>CookieValue注解</h2><ul><li>作用：用于获取指定cookie的名称的值 </li><li>属性 :   value:cookie的名称 </li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> String cookieValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="ModelAttribute注解"><a href="#ModelAttribute注解" class="headerlink" title="ModelAttribute注解"></a>ModelAttribute注解</h2><ul><li><p>作用</p><ul><li>出现在方法上：表示当前方法会在控制器方法执行前线执行。 </li><li>出现在参数上：获取指定的数据给参数赋值。 </li></ul></li><li><p>应用场景</p><ul><li>. 当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。 </li></ul></li></ul><h2 id="SessionAttributes注解"><a href="#SessionAttributes注解" class="headerlink" title="SessionAttributes注解"></a>SessionAttributes注解</h2><ul><li>作用：用于多次执行控制器方法间的参数共享 </li><li>属性 : . value：指定存入属性的名称 </li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> types <span class="token operator">=</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 把数据存入到session域对象中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向session域中保存数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从session中获取值 </span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/find"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">find</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer age <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//清除值</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span>SessionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        status<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="/2020/04/16/%E9%9D%A2%E7%BB%8F/"/>
      <url>/2020/04/16/%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><p>Java中的线程调度是抢占式调度，根据优先级别调度，当优先级别一样时，就会随机调度。</p><h2 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h2><p>Java中的多线程执行通过继承Thread，或者实现Runable接口，后者可以降低耦合。</p><h2 id="线程在内存中的执行"><a href="#线程在内存中的执行" class="headerlink" title="线程在内存中的执行"></a>线程在内存中的执行</h2><p>主函数进入栈中执行，当调用线程中的run方法时，就会开辟一个新的栈，两个线程抢占cpu调度。</p><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><p>当多线程执行共享数据时，就会产生数据调度不同的问题。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>java中把多线程执行时需要共享数据的操作放在synchronized(this)代码块中，并指定锁对象</li><li>用synchronized修饰的方法，接着调用该方法。</li><li>lock加锁unlock释放锁<h2 id="线程唤醒"><a href="#线程唤醒" class="headerlink" title="线程唤醒"></a>线程唤醒</h2>线程唤醒也叫协程，一个线程生产，另一个线程wait(),当满足一定条件的时候生产线程用notify(),唤醒另一个线程。注意此次锁对象必须一致<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2>Executors工厂中的newFixedThreadPool的静态方法，通过实现Runnable接口，submit()提交执行</li></ul><h1 id="HashMap线程安全问题"><a href="#HashMap线程安全问题" class="headerlink" title="HashMap线程安全问题"></a>HashMap线程安全问题</h1><p>Hashmap的底层是通过数组加(jdk1.8)链表/红黑树构成的饿，当链表超过八位，改用红黑树。当多个线程对同一个hashmap进行操作，比如一个get，一个put，这样就会产生线程安全问题。当hashmap进行扩容是也会产生线程安全问题。</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>当数组长度超过数组长度*负载因子0.75f是，就会进行resize()数组扩容。将旧数组移动到新数组</p><ul><li>一个：判断next是否为null—-&gt;hash &amp; newArray.length</li><li>链表：hash&amp;old 判断是否在原位置</li><li>红黑树：将数组spilt，重新分配</li></ul><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>可以通过synchronized代码块加锁，或者lock()和unlock()</li><li>或者使用ConcurrentHashMap</li></ul><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>ConcurrentHashMap通过Cas无锁化实现的。</p><ul><li><p>悲观锁：数据库有两种锁，悲观锁的原理是每次实现数据库的增删改的时候都进行阻塞，防止数据发生脏读</p></li><li><p>乐观锁：的原理是在数据库更新的时候，用一个version字段来记录版本号，然后通过比较是不是自己要修改的版本号再进行修改。这其中就引出了一种比较替换的思路来实现数据的一致性，事实上，cas也是基于这样的原理</p></li><li><p>cas：cas的英文翻译全称是compare and set ，也就是比较替换技术，·它包含三个参数，CAS(V,E,N),其中V（variile）表示欲更新的变量，E(Excepted)表示预期的值，N(New)表示新值,只有当V等于E值的时候吗，才会将V的值设为N,如果V值和E值不同，则说明已经有其它线程对该值做了更新，则当前线程什么都不做，直接返回V值。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象(二)</title>
      <link href="/2020/03/29/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%BA%8C/"/>
      <url>/2020/03/29/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><pre class=" language-java"><code class="language-java">定义子类的格式：<span class="token keyword">public</span> <span class="token keyword">class</span> 子类名称 <span class="token keyword">extends</span> 父类名称 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*局部变量：         直接写成员变量名本类的成员变量：    this.成员变量名父类的成员变量：    super.成员变量名 */</span></code></pre><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>在父子类的继承关系当中，创建子类对象，访问成员方法的规则：创建的对象是谁，就优先用谁，如果没有则向上找。</p><ul><li>注意事项：<ul><li>无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的。</li></ul></li><li>重写（Override）<ul><li>概念：在继承关系当中，方法的名称一样，参数列表也一样。</li></ul></li><li>重写（Override）：方法的名称一样，参数列表【也一样】。覆盖、覆写。</li><li>重载（Overload）：方法的名称一样，参数列表【不一样】。</li><li>方法的覆盖重写特点：创建的是子类对象，则优先用子类方法</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>方法覆盖重写的注意事项：</p><ul><li><ol><li>必须保证父子类之间方法的名称相同，参数列表也相同。<ul><li>@Override：写在方法前面，用来检测是不是有效的正确覆盖重写。</li><li>这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。</li></ul></li></ol></li><li><ol start="2"><li>子类方法的返回值必须【小于等于】父类方法的返回值范围。<ul><li>小扩展提示：java.lang.Object类是所有类的公共最高父类（祖宗类）java.lang.String就是Object的子类。</li></ul></li></ol></li><li><ol start="3"><li>子类方法的权限必须【大于等于】父类方法的权限修饰符。<ul><li>小扩展提示：public &gt; protected &gt; (default) &gt; private</li><li>备注：(default)不是关键字default，而是什么都不写，留空。</li></ul></li></ol></li></ul></li></ul><h2 id="继承关系中，父子类构造方法的访问特点"><a href="#继承关系中，父子类构造方法的访问特点" class="headerlink" title="继承关系中，父子类构造方法的访问特点"></a>继承关系中，父子类构造方法的访问特点</h2><ul><li><ol><li>子类构造方法当中有一个默认隐含的“super()”调用，所以一定是先调用的父类构造，后执行的子类构造。</li></ol></li><li><ol start="2"><li>子类构造可以通过super关键字来调用父类重载构造。</li></ol></li><li><ol start="3"><li>super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</li></ol></li><li>总结：<ul><li>子类必须调用父类构造方法，不写则赠送super()；写了则用写的指定的super调用</li><li>super只能有一个，还必须是第一个。</li></ul></li></ul><h1 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h1><ul><li><p>抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束。</p></li><li><p>抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。</p></li><li><p>如何使用抽象类和抽象方法：</p><ul><li><ol><li>不能直接创建new抽象类对象。</li></ol></li><li><ol start="2"><li>必须用一个子类来继承抽象父类。</li></ol></li><li><ol start="3"><li>子类必须覆盖重写抽象父类当中所有的抽象方法。<ul><li>覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</li></ul></li></ol></li><li><ol start="4"><li>创建子类对象进行使用。</li></ol></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这是一个抽象方法，代表吃东西，但是具体吃什么（大括号的内容）不确定。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这是普通的成员方法</span><span class="token comment" spellcheck="true">//    public void normalMethod() {</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span></code></pre><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><ul><li>常见四种用法：<ul><li><ol><li>可以用来修饰一个类</li></ol></li><li><ol start="2"><li>可以用来修饰一个方法</li></ol></li><li><ol start="3"><li>还可以用来修饰一个局部变量</li></ol></li><li><ol start="4"><li>还可以用来修饰一个成员变量</li></ol></li></ul></li><li>注意<ul><li>对于基本类型来说，不可变说的是变量当中的数据不可改变</li><li>对于引用类型来说，不可变说的是变量当中的地址值不可改变</li></ul></li></ul><h1 id="Java中有四种权限修饰符"><a href="#Java中有四种权限修饰符" class="headerlink" title="Java中有四种权限修饰符"></a>Java中有四种权限修饰符</h1><pre><code>                 public  &gt;    protected   &gt;    (default)   &gt;    private</code></pre><p>同一个类（我自己）        YES                      YES                              YES                         YES<br>同一个包（我邻居）        YES                      YES                              YES                         NO<br>不同包子类（我儿子）    YES                      YES                              NO                          NO<br>不同包非子类（陌生人）YES                       NO                              NO                          NO<br><strong>注意事项：(default)并不是关键字“default”，而是根本不写。</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象(一)</title>
      <link href="/2020/03/25/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%80)/"/>
      <url>/2020/03/25/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>成员变量是直接定义在类当中的，在方法外边。</p></li><li><p>成员方法不要写static关键字。</p></li></ul><h2 id="实例方法和类方法"><a href="#实例方法和类方法" class="headerlink" title="实例方法和类方法"></a>实例方法和类方法</h2><p>一个类中的方法可以互相调用。但要注意：实例方法可以调用该类中的其他方法。类方法只能调用其他类方法，不能调用实例方法。当类文件加载到内存时，实例方法不会被分配内存空间，只有在对象创建之后才会分配。而类方法在该类被加载到内存时就分配了相应的内存空间。类方法只能访问其他static方法。类方法只能访问其他static数据，类变量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person one <span class="token operator">=</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是one的地址："</span><span class="token operator">+</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>        DemoArray a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Person <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是two的地址："</span><span class="token operator">+</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是实例方法调用类方法："</span><span class="token operator">+</span><span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*结果：这是two的地址：JavaStudy.Day03.Person@4554617c这是one的地址：JavaStudy.Day03.Person@4554617c这是two的地址：JavaStudy.Day03.Person@74a14482这是实例方法调用类方法：JavaStudy.Day03.Person@74a14482*/</span><span class="token comment" spellcheck="true">// one和two的地址是一样的，因为调用的时候传递的是地址</span></code></pre><h2 id="局部变量和成员变量"><a href="#局部变量和成员变量" class="headerlink" title="局部变量和成员变量"></a>局部变量和成员变量</h2><ul><li><ol><li>定义的位置不一样【重点】<ul><li>局部变量：在方法的内部</li><li>成员变量：在方法的外部，直接写在类当中</li></ul></li></ol></li><li><ol start="2"><li>作用范围不一样【重点】<ul><li>局部变量：只有方法当中才可以使用，出了方法就不能再用</li><li>成员变量：整个类全都可以通用。</li></ul></li></ol></li><li><ol start="3"><li>默认值不一样【重点】<ul><li>局部变量：没有默认值，如果要想使用，必须手动进行赋值</li><li>成员变量：如果没有赋值，会有默认值，规则和数组一样</li></ul></li></ol></li><li><ol start="4"><li>内存的位置不一样（了解）<ul><li>局部变量：位于栈内存</li><li>成员变量：位于堆内存</li></ul></li></ol></li><li><ol start="5"><li>生命周期不一样（了解）<ul><li>局部变量：随着方法进栈而诞生，随着方法出栈而消失</li><li>成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失</li></ul></li></ol></li></ul><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。如果需要访问本类当中的成员变量，需要使用格式：this.成员变量名 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoSayHello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Kobe"</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"James"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">",你好。我是"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      打印地址值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*结果James,你好。我是KobeJavaStudy.Day03.Dtudent@4554617cJavaStudy.Day03.Dtudent@4554617c*/</span></code></pre><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><p>构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法。</p><ul><li><p>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> 类名称<span class="token punctuation">(</span>参数类型 参数名称<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 方法体</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>注意事项：</p><ul><li><p>构造方法的名称必须和所在的类名称完全一样，就连大小写也要一样</p></li><li><p>构造方法不要写返回值类型，连void都不写</p></li><li><p>构造方法不能return一个具体的返回值</p></li><li><p>如果没有编写任何构造方法，那么编译器将会默认赠送一个构造方法，没有参数、方法体什么事情都不做。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>一旦编写了至少一个构造方法，那么编译器将不再赠送。</p></li><li><p>构造方法也是可以进行重载的</p></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoDog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dog dog <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(dog.getName());</span>        Dog dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Kobe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是有参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*结果：这是无参构造方法这是有参构造方法Kobe*/</span></code></pre><h2 id="ArrayList的用法"><a href="#ArrayList的用法" class="headerlink" title="ArrayList的用法"></a>ArrayList的用法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListStudy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        创建</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        添加</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        判断是否插入成功</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        移除</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        取出</span>        String fruit <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取长度</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>如果希望向集合ArrayList当中存储基本类型数据，必须使用基本类型对应的“包装类”。</strong></p><p>基本类型    包装类（引用类型，包装类都位于java.lang包下）<br>byte        Byte<br>short       Short<br>int         Integer     【特殊】<br>long        Long<br>float       Float<br>double      Double<br>char        Character   【特殊】<br>boolean     Boolean</p><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringStudy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        String str2<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/silent-666/images/raw/dff8f38895f7bbed5f39bc227255ff219ee88edb/java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.png" alt="字符串的常量池"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringStudy01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只根据内容判断是否相等</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">//忽略大小写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringStudy03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1<span class="token operator">=</span><span class="token string">"HelloWorld"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        拼接</span>        String s2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        查找索引所在字符</span>        <span class="token keyword">char</span> s3<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        查找小字符串在大字符串的索引，返回第一个字符的索引，找不到则返回-1</span>        <span class="token keyword">int</span> s4<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"llo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>一旦使用static修饰成员方法，那么这就成为了静态方法。静态方法不属于对象，而是属于类的。</li><li>如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。</li><li>如果有了static关键字，那么不需要创建对象，直接就能通过类名称来使用它。</li><li>无论是成员变量，还是成员方法。如果有了static，都推荐使用类名称进行调用。</li><li>静态变量：类名称.静态变量</li><li>静态方法：类名称.静态方法()</li></ul><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><ol><li>静态不能直接访问非静态。<ul><li>原因：因为在内存当中是【先】有的静态内容，【后】有的非静态内容。“先人不知道后人，但是后人知道先人。”</li></ul></li></ol></li><li><ol start="2"><li>静态方法当中不能用this。<ul><li>原因：this代表当前对象，通过谁调用的方法，谁就是当前对象。</li></ul></li></ol></li></ul><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>静态代码块的格式是：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名称 <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 静态代码块的内容</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>特点：当第一次用到本类时，静态代码块执行唯一的一次。</li><li>静态内容总是优先于非静态，所以静态代码块比构造方法先执行。</li><li>静态代码块的典型用途：<ul><li>用来一次性地对静态成员变量进行赋值。<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JavaStudy<span class="token punctuation">.</span>Day05<span class="token punctuation">.</span>Demo03<span class="token punctuation">;</span></code></pre></li></ul></li></ul><p>public class StaticStudy01 {<br>    public static void main(String[] args) {<br>        Student student = new Student();<br>    }<br>}</p><p>class Student {</p><pre><code>static {    System.out.println(&quot;这是静态方法&quot;);}public Student(){    System.out.println(&quot;这是构造方法&quot;);}</code></pre><p>}</p><p>/*<br>结果：<br>这是静态方法<br>这是构造方法<br>*/</p><pre><code>## static学号计数器```javapublic class UsePerson {    public static void main(String[] args) {        Person person1 = new Person();        System.out.println(&quot;person1:&quot;+person1.getIdCount());        Person person2 = new Person();        System.out.println(&quot;person2:&quot;+person2.getIdCount());    }}class Person{    private String name;    private int age;    private static int idCount=0;    public Person(){        this.idCount=++idCount;    }    public Person(String name,int age,int idCount){        this.name=name;        this.age=age;        this.idCount=++idCount;    }    public int getIdCount() {        return idCount;    }    public void setIdCount(int idCount) {        this.idCount = idCount;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }}</code></pre><h2 id="Arrays的使用"><a href="#Arrays的使用" class="headerlink" title="Arrays的使用"></a>Arrays的使用</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysStudy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        将数组转化为字符串，返回值为String</span>        String string<span class="token operator">=</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        将数组按升序排列，无返回值</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        String string1<span class="token operator">=</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA入门</title>
      <link href="/2020/03/23/JAVA%E5%85%A5%E9%97%A8/"/>
      <url>/2020/03/23/JAVA%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-JRE和JDK的关系"><a href="#JVM-JRE和JDK的关系" class="headerlink" title="JVM,JRE和JDK的关系"></a>JVM,JRE和JDK的关系</h1><p><img src="https://gitee.com/silent-666/images/raw/69a0e22e2287b7b13761e9ecdf5f00270207555a/java%E5%9F%BA%E7%A1%80/1.png" alt></p><h1 id="Java基本知识"><a href="#Java基本知识" class="headerlink" title="Java基本知识"></a>Java基本知识</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>默认double类型，long类型和float声明是需要加上大写的L或F</p></li><li><p>大类型可以转为小类型，小类型转换要强制转换,注意一出</p></li></ul><pre class=" language-java"><code class="language-java">  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>100L    </code></pre><p><img src="https://gitee.com/silent-666/images/raw/69a0e22e2287b7b13761e9ecdf5f00270207555a/java%E5%9F%BA%E7%A1%80/2.jpg" alt></p><ul><li><p>&amp;&amp; 和 || 具有短路效果，左边可以判断最终结果，停止执行</p></li><li><p>方法定义</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//方法体</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul><li>方法重载与下列因素有关<ul><li>参数个数不同</li><li>参数类型不同</li><li>参数的多类型顺序不同</li></ul></li><li>方法重载与下列因素有关<ul><li>与参数的名称无关</li><li>与方法的返回值类型无关</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoadStudy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    参数类型不同</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    参数类型不同</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStudy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 动态创建</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 静态创建</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 静态省略创建</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 静态分步创建</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3<span class="token punctuation">;</span>        array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态分步创建</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array4<span class="token punctuation">;</span>        array4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Java的内存划分"><a href="#Java的内存划分" class="headerlink" title="Java的内存划分"></a>Java的内存划分</h2><ul><li>栈（Stack): <ul><li>存放的都是方法中的局部变量。<strong>方法运行一定要在栈当中运行</strong>。</li><li>局部变量：方法的参数，或者方法{}内部的变量</li><li>作用域：一旦超出作用域，立刻从从栈内存当中消失。</li></ul></li><li>堆(Heap):<ul><li>凡事new出来的东西都在堆当中。</li><li>堆内存里面的东西都有一个地址值：16进制</li><li>堆内存里面的数据，都有默认值，规则：<ul><li>正数       默认0</li><li>浮点数     默认0.0</li><li>字符       默认’\u0000’</li><li>布尔       默认false</li><li>引用类型    默认null， 如数组</li></ul></li></ul></li><li>方法区(Method Area): 存储.class相关信息，包含方法的信息。</li><li>本地方法栈(Native Method Stack):与操作系统相关。</li><li>寄存器（pc Register): 与CPU相关。 </li></ul><p><img src="https://gitee.com/silent-666/images/raw/69a0e22e2287b7b13761e9ecdf5f00270207555a/java%E5%9F%BA%E7%A1%80/3.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django验证码</title>
      <link href="/2020/03/20/django%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2020/03/20/django%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="django验证码"><a href="#django验证码" class="headerlink" title="django验证码"></a>django验证码</h1><p>利用pillow画验证码</p><h2 id="image画布"><a href="#image画布" class="headerlink" title="image画布"></a>image画布</h2><ul><li><p>Image.new()</p><ul><li>mode 模式，如RGB</li></ul></li><li><p>size</p><ul><li>color</li></ul></li></ul><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><ul><li>ImageDraw.Draw()<ul><li>im 画布</li><li>mode 模式</li></ul></li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul><li>ImageFont.truetype() 读取字体<ul><li>font 字体位置</li><li>size 大小</li></ul></li></ul><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><ul><li>save()<ul><li>fp 保存位置</li><li>format 保存格式，png等 </li><li>BytesIO() 内存流，保存在内存</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> One<span class="token punctuation">.</span>utils <span class="token keyword">import</span> get_color<span class="token punctuation">,</span> generate<span class="token keyword">def</span> <span class="token function">get_code</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    mode <span class="token operator">=</span> <span class="token string">"RGB"</span>    size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    red <span class="token operator">=</span> get_color<span class="token punctuation">(</span><span class="token punctuation">)</span>    green <span class="token operator">=</span> get_color<span class="token punctuation">(</span><span class="token punctuation">)</span>    blue <span class="token operator">=</span> get_color<span class="token punctuation">(</span><span class="token punctuation">)</span>    color <span class="token operator">=</span> <span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 画布</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span>mode<span class="token operator">=</span>mode<span class="token punctuation">,</span> size<span class="token operator">=</span>size<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">)</span>    varify_code <span class="token operator">=</span> generate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>varify_code<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将验证码用session保持，以便比较，转小写</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'varify_code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> varify_code<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 画笔</span>    imagedraw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>image<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置字体</span>    imagefont <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>FONT_PATH<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 画文字</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fill <span class="token operator">=</span> <span class="token punctuation">(</span>get_color<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_color<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_color<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        imagedraw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token operator">=</span>varify_code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>imagefont<span class="token punctuation">,</span> fill<span class="token operator">=</span>fill<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        imagedraw<span class="token punctuation">.</span>point<span class="token punctuation">(</span>xy<span class="token operator">=</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>fill<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存在内存</span>    fp <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># content_type,设置返回格式</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>fp<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">'image/png'</span><span class="token punctuation">)</span></code></pre><p>创建一个utils.py文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">get_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    varify_code <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefjhijklmnopqrstuvwxyz123456789'</span>    code <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">+=</span> varify_code<span class="token punctuation">[</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>varify_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> code</code></pre><p>在setting.py中设置</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在static中创建fonts文件,放入字体文件</span>FONT_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'static/fonts/simhei.ttf'</span><span class="token punctuation">)</span></code></pre><p>创建一个login.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>one:login<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>验证码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>varify_code<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入验证码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>one:get_code<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src alt></p>]]></content>
      
      
      <categories>
          
          <category> django2.2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django分页器</title>
      <link href="/2020/03/19/django%E5%88%86%E9%A1%B5%E5%99%A8/"/>
      <url>/2020/03/19/django%E5%88%86%E9%A1%B5%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="django分页器"><a href="#django分页器" class="headerlink" title="django分页器"></a>django分页器</h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建100个对象</span><span class="token keyword">def</span> <span class="token function">add_student</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        student <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>        student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小傻瓜%d"</span> <span class="token operator">%</span> i        student<span class="token punctuation">.</span>age <span class="token operator">=</span> i        student<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"创建成功"</span><span class="token punctuation">)</span></code></pre><p>手动实现分页</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    page_num <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    per_page <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'num'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    students <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span>page_num<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>per_page<span class="token punctuation">:</span>per_page<span class="token operator">*</span>page_num<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'students.html'</span><span class="token punctuation">,</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>使用paginator</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_student</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    page_num <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    per_page <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'num'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> page_num <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> per_page <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">or</span> page_num <span class="token operator">*</span> per_page <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>        page_num <span class="token operator">=</span> <span class="token number">1</span>        per_page <span class="token operator">=</span> <span class="token number">10</span>    students <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Paginator属性</span>    <span class="token comment" spellcheck="true"># object_list</span>    <span class="token comment" spellcheck="true"># per_page</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>students<span class="token punctuation">,</span> per_page<span class="token operator">=</span>per_page<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># page()函数</span>    <span class="token comment" spellcheck="true"># number</span>    page_objects <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span>number<span class="token operator">=</span>page_num<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'page_objects'</span><span class="token punctuation">:</span> page_objects<span class="token punctuation">,</span>        <span class="token string">'page_range'</span><span class="token punctuation">:</span> paginator<span class="token punctuation">.</span>page_range<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'getstudent.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>data<span class="token punctuation">)</span></code></pre><p>getstudent.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>getstudent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/1.11.1/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/twitter-bootstrap/3.3.7/js/bootstrap.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    {% for student in page_objects.object_list %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ student.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Page navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {% if page_objects.has_previous %}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>one:get_student<span class="token punctuation">'</span> %}?page<span class="token punctuation">=</span>{{ page_objects.previous_page_number }}<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Previous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&laquo;">&amp;laquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% else %}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Previous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&laquo;">&amp;laquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% endif %}        {% for page_index in page_range %}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>one:get_student<span class="token punctuation">'</span> %}?page<span class="token punctuation">=</span>{{ page_index }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ page_index }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% endfor %}        {% if page_objects.has_next %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>one:get_student<span class="token punctuation">'</span> %}?page<span class="token punctuation">=</span>{{ page_objects.next_page_number }}<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% else %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {% endif %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> django2.2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django中间件</title>
      <link href="/2020/03/18/django%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2020/03/18/django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="django中间件"><a href="#django中间件" class="headerlink" title="django中间件"></a>django中间件</h1><h2 id="基本原理图"><a href="#基本原理图" class="headerlink" title="基本原理图"></a>基本原理图</h2><p><img src="https://gitee.com/silent-666/images/raw/f48c13e34676b28b17250a459916b84edd50475d/django%E4%B8%AD%E9%97%B4%E4%BB%B6/1.png" alt="中间件结构流程图"></p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1.创建文件夹"></a>1.创建文件夹</h3><p>创建一个MIddleWare文件夹，在文件夹下创建一个py文件，Leardnmiddle.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HelloMiddle</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 输出ip地址</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-在setting中注册"><a href="#2-在setting中注册" class="headerlink" title="2.在setting中注册"></a>2.在setting中注册</h3><pre class=" language-python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true"># 文件位置</span>    <span class="token string">'MiddleWare.learn_middle.HelloMiddle'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.security.SecurityMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.csrf.CsrfViewMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages.middleware.MessageMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">class</span> <span class="token class-name">HelloMiddle</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 实现抽奖</span>        ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/one/getphone/'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> ip <span class="token operator">==</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"恭喜你获得华为保时捷手机"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/one/search/'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 实现频繁请求限制，利用缓存</span>            black_list <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> ip <span class="token keyword">in</span> black_list<span class="token punctuation">:</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"请不要在尝试"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> result <span class="token operator">and</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>                black_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>                cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">,</span> black_list<span class="token punctuation">,</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"请求太频繁了，一天后再试"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 实现60秒请求10次限制，数据模型如下图</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'访问过于频繁请稍候再试'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 错误处理，重定向        </span>    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> exception<span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'one:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       </code></pre><p>什么是缓存机制，请参考 <a href="https://liangzero.com/2020/03/11/django之djangocache/" target="_blank" rel="noopener">这里</a></p><p><img src="https://gitee.com/silent-666/images/raw/f48c13e34676b28b17250a459916b84edd50475d/django%E4%B8%AD%E9%97%B4%E4%BB%B6/2.png" alt="60秒请求10次限制数据模型图"></p><p>## </p>]]></content>
      
      
      <categories>
          
          <category> django2.2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django之djangocache</title>
      <link href="/2020/03/11/django%E4%B9%8Bdjangocache/"/>
      <url>/2020/03/11/django%E4%B9%8Bdjangocache/</url>
      
        <content type="html"><![CDATA[<h1 id="django之djangocache"><a href="#django之djangocache" class="headerlink" title="django之djangocache"></a>django之djangocache</h1><h2 id="缓存框架的核心目标"><a href="#缓存框架的核心目标" class="headerlink" title="缓存框架的核心目标"></a>缓存框架的核心目标</h2><ul><li>较少的代码<ul><li>缓存应该尽可能快</li><li>因此围绕缓存后端的所有框架代码应该保持在绝对最小值，特别是对于获取操作</li></ul></li><li>一致性<ul><li>缓存API应该是提供跨越不同缓存后端的一致接口</li></ul></li><li>可扩展性<ul><li>基于开发人员的需求，缓存API应该可以在应用程序级别扩展</li></ul></li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>django内置了缓存框架，并提供了几种常用的缓存</p><ul><li>基于Memcached缓存</li><li>使用数据库进行缓存</li><li>使用文件系统进行缓存</li><li>使用本地内存进行缓存</li><li>提供缓存扩展接口</li></ul><h2 id="缓存流程图"><a href="#缓存流程图" class="headerlink" title="缓存流程图"></a>缓存流程图</h2><h3 id="第一次访问（无缓存）"><a href="#第一次访问（无缓存）" class="headerlink" title="第一次访问（无缓存）"></a>第一次访问（无缓存）</h3><p><img src="https://gitee.com/silent-666/images/raw/f1736e1824e94313e7b9a98d0ca169aec8e5c10d/django%E4%B9%8Bdjangocache/2.png" alt="第一次"></p><h3 id="第二次访问（有缓存）"><a href="#第二次访问（有缓存）" class="headerlink" title="第二次访问（有缓存）"></a>第二次访问（有缓存）</h3><p><img src="https://gitee.com/silent-666/images/raw/f1736e1824e94313e7b9a98d0ca169aec8e5c10d/django%E4%B9%8Bdjangocache/1.png" alt="第二次"></p><h2 id="介绍缓存的三种方法"><a href="#介绍缓存的三种方法" class="headerlink" title="介绍缓存的三种方法"></a>介绍缓存的三种方法</h2><h3 id="关系数据库缓存（Mysql）"><a href="#关系数据库缓存（Mysql）" class="headerlink" title="关系数据库缓存（Mysql）"></a>关系数据库缓存（Mysql）</h3><p>在mysql中创建DjangoCache数据库，setting.py配置数据库</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'DjangoCache'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在终端输入 <strong>python manage.py createcachetable 表名</strong>views.py代码</p><pre class=" language-python"><code class="language-python">@cache_page<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    news_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        news_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'中国疫情有了很大的好转%d'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 让网页等待5秒，目的是模拟请求等待    </span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>index.html代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>News<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>{% for news in news_list %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ news }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>{% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="调用缓存API"><a href="#调用缓存API" class="headerlink" title="调用缓存API"></a>调用缓存API</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如上表在views判断是否有缓存，有缓存返回，没缓存设置缓存</span>    <span class="token keyword">if</span> result<span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    news_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        news_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'中国疫情有了很大的好转%d'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response</code></pre><ul><li><p>cache.set</p><ul><li>key</li><li>value</li><li>timeout</li></ul></li><li><p>get</p></li><li><p>add</p></li><li><p>get_<em>or _set</em></p></li><li><p>get_many</p></li><li><p>set_many</p></li><li><p>delete</p></li><li><p>delete_many</p></li><li><p>clear</p></li><li><p>incr 增加</p><ul><li>incr(key, value) key对应的值上添加 value</li></ul></li><li><p>decr 减少</p><ul><li><p>decr(key, value) key对应的值上减少value</p></li><li><p>如果value不写，默认变更为1</p></li></ul></li></ul><h3 id="Reids缓存"><a href="#Reids缓存" class="headerlink" title="Reids缓存"></a>Reids缓存</h3><p>首先需要安装django-redis和django-redis-cache</p><p>注意：<strong>我这里使用django1.9、django-redis4.4和django-redis-cache1.7还有redis2.10.6</strong>用这条命令来指定安装版本和国内镜像地址<strong>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> –trusted-host pypi.tuna.tsinghua.edu.cn django-reids==4.5</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># setting.py配置</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.db.DatabaseCache'</span><span class="token punctuation">,</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token string">'my_cache_table'</span><span class="token punctuation">,</span>        <span class="token string">'TIMEOUT'</span><span class="token punctuation">:</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'redis_backend'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'CLIENT_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'django_redis.client.DefaultClient'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在views.py中配置</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 指定缓存位置，如上，“default”则存储在mysql</span>    cache <span class="token operator">=</span> caches<span class="token punctuation">[</span><span class="token string">'redis_backend'</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    news_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        news_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'中国疫情有了很大的好转%d'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token comment" spellcheck="true"># 或者</span>@cache_page<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> cache<span class="token operator">=</span><span class="token string">'redis_backend'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">news</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'new_list'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django之文件上传</title>
      <link href="/2020/03/10/django%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/03/10/django%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="django之文件上传"><a href="#django之文件上传" class="headerlink" title="django之文件上传"></a>django之文件上传</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>创建一个static文件，在static下创建一个img文件存放图片</p><h3 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h3><pre class=" language-python"><code class="language-python">STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^upload_1'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>upload_1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'upload_1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">upload_1</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'upload_1.html'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取文件用FILES</span>        icon <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'icon'</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'static/img/2.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 上传时时一块一块的上传，所以用for</span>            <span class="token keyword">for</span> part <span class="token keyword">in</span> icon<span class="token punctuation">.</span>chunks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>part<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'success!!!'</span><span class="token punctuation">)</span></code></pre><h3 id="upload-html"><a href="#upload-html" class="headerlink" title="upload.html"></a>upload.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>one:upload_1<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% csrf_token %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择文件<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>开启服务器，访问</p><p><img src="https://gitee.com/silent-666/images/raw/0b4f57cca6be918a045a0ebc075a9ce4d42ee9fb/django%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1.jpg" alt></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>将文件路径存储在数据库中</p><h3 id="setting-py-1"><a href="#setting-py-1" class="headerlink" title="setting.py"></a>setting.py</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在setting.py中添加</span>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'static/upload'</span><span class="token punctuation">)</span></code></pre><h3 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># uplad_to指定文件路径</span>    icon <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'icons'</span><span class="token punctuation">)</span></code></pre><h3 id="urls-py-1"><a href="#urls-py-1" class="headerlink" title="urls.py"></a>urls.py</h3><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^upload_1'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>upload_1<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'upload_1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^upload_2'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>upload_2<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'upload_2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="views-py-1"><a href="#views-py-1" class="headerlink" title="views.py"></a>views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">upload_2</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'upload_2.html'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        icon <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'icon'</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> UserModel<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>icon <span class="token operator">=</span> icon        user<span class="token punctuation">.</span>name <span class="token operator">=</span> name        user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'Success!!'</span><span class="token punctuation">)</span></code></pre><p>开启服务器,访问</p><p><img src="https://gitee.com/silent-666/images/raw/0b4f57cca6be918a045a0ebc075a9ce4d42ee9fb/django%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2.jpg" alt></p><h2 id="在网页显示用户名头像"><a href="#在网页显示用户名头像" class="headerlink" title="在网页显示用户名头像"></a>在网页显示用户名头像</h2><h3 id="views-py-2"><a href="#views-py-2" class="headerlink" title="views.py"></a>views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_icon</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> UserModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token operator">=</span>username<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 这里的url是MEDIA_ROOT+存储在数据的路径</span>    icon_url <span class="token operator">=</span> <span class="token string">'/static/upload/'</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>url    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'show.html'</span><span class="token punctuation">,</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="show-hml"><a href="#show-hml" class="headerlink" title="show.hml"></a>show.hml</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ icon_url }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>头像<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/silent-666/images/raw/0b4f57cca6be918a045a0ebc075a9ce4d42ee9fb/django%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/3.jpg" alt></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在linux系统中有一个小bug，当一个文件夹的文件超过65535时，文件就打不开，为了避免这种情况，在models.py中设置</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用年月日分层级作为文件夹，这样就可以有效的避免这个bug</span>    icon <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'%Y/%m/%d/icons'</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/silent-666/images/raw/0b4f57cca6be918a045a0ebc075a9ce4d42ee9fb/django%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/4.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django之SqlToModel</title>
      <link href="/2020/03/10/django%E4%B9%8BSqlToModel/"/>
      <url>/2020/03/10/django%E4%B9%8BSqlToModel/</url>
      
        <content type="html"><![CDATA[<h1 id="django之SqlToModel"><a href="#django之SqlToModel" class="headerlink" title="django之SqlToModel"></a>django之SqlToModel</h1><p>如何将在msql中创建好的数据库应用到django中？</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> test char <span class="token keyword">set</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">use</span> test<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> people<span class="token punctuation">(</span>Number <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> name <span class="token keyword">varbinary</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">)</span>        </code></pre><h2 id="django配置"><a href="#django配置" class="headerlink" title="django配置"></a>django配置</h2><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="在Terminal中输入命令"><a href="#在Terminal中输入命令" class="headerlink" title="在Terminal中输入命令"></a>在Terminal中输入命令</h2><p><strong>python manage.py inspectdb &gt; (写入的文件位置）</strong></p>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django多对多模板</title>
      <link href="/2020/03/10/django%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/03/10/django%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="django多对多模板"><a href="#django多对多模板" class="headerlink" title="django多对多模板"></a>django多对多模板</h1><p>以用户购买商品为例子，一个商品可以被多个用户购买，一个用户可以购买多个商品</p><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># Create your models here.</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    u_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    g_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>    g_user <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>User<span class="token punctuation">)</span></code></pre><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">from</span> One<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token punctuation">,</span> Goods<span class="token comment" spellcheck="true"># 创建用户</span><span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    user<span class="token punctuation">.</span>u_name <span class="token operator">=</span> username    user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'人员创建成功'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建商品</span><span class="token keyword">def</span> <span class="token function">create_goods</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    goods <span class="token operator">=</span> Goods<span class="token punctuation">(</span><span class="token punctuation">)</span>    g_name <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'g_name'</span><span class="token punctuation">)</span>    goods<span class="token punctuation">.</span>g_name <span class="token operator">=</span> g_name    goods<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'物品创建成功'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用户将商品加入购物车</span><span class="token keyword">def</span> <span class="token function">add_cart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    user_id <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'u_id'</span><span class="token punctuation">)</span>    goods_id <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'g_id'</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>user_id<span class="token punctuation">)</span>    goods <span class="token operator">=</span> Goods<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>goods_id<span class="token punctuation">)</span>    user<span class="token punctuation">.</span>goods_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>goods<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取商品列表</span><span class="token keyword">def</span> <span class="token function">get_goods</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    u_id <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>u_id<span class="token punctuation">)</span>    goods_list <span class="token operator">=</span> user<span class="token punctuation">.</span>goods_set<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'getgoods.html'</span><span class="token punctuation">,</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>注意：从获取主为显性属性，主获取从为隐性属性。</strong></p><h2 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> One <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^createuser/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>create_user<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'create_user'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^creategoods/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>create_goods<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'create_goods'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^addcart/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>add_cart<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'add_cart'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^getgoods/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>get_goods<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'get_goods'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="sql代码"><a href="#sql代码" class="headerlink" title="sql代码"></a>sql代码</h2><p>One_goods表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> One_goods<span class="token punctuation">(</span>    id     <span class="token keyword">integer</span>     <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span> autoincrement<span class="token punctuation">,</span>    g_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>One_user表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> One_user<span class="token punctuation">(</span>    id     <span class="token keyword">integer</span>     <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span> autoincrement<span class="token punctuation">,</span>    u_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>One_goods_g_user表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> One_goods_g_user<span class="token punctuation">(</span>    id       <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span> autoincrement<span class="token punctuation">,</span>    goods_id <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">references</span> One_goods<span class="token punctuation">,</span>    user_id  <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">references</span> One_user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> One_goods_g_user_6753b66e    <span class="token keyword">on</span> One_goods_g_user <span class="token punctuation">(</span>goods_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> One_goods_g_user_e8701ad4    <span class="token keyword">on</span> One_goods_g_user <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> One_goods_g_user_goods_id_5983b763_uniq    <span class="token keyword">on</span> One_goods_g_user <span class="token punctuation">(</span>goods_id<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共前缀</title>
      <link href="/2020/03/07/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
      <url>/2020/03/07/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p><img src="https://gitee.com/silent-666/images/raw/8d251de0f37a820a6fabad8ed8ca33b39af5d29a/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80.jpg" alt="题目"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type strs: List[str]        :rtype: str        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> strs<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span>        s1 <span class="token operator">=</span> min<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        s2 <span class="token operator">=</span> max<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> s2<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> s1</code></pre><p><img src="https://gitee.com/silent-666/images/raw/8d251de0f37a820a6fabad8ed8ca33b39af5d29a/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%801.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django设置cookie和session</title>
      <link href="/2020/03/06/django%E8%AE%BE%E7%BD%AEcookie%E5%92%8Csession/"/>
      <url>/2020/03/06/django%E8%AE%BE%E7%BD%AEcookie%E5%92%8Csession/</url>
      
        <content type="html"><![CDATA[<h1 id="django设置cookie和session"><a href="#django设置cookie和session" class="headerlink" title="django设置cookie和session"></a>django设置cookie和session</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="不加密"><a href="#不加密" class="headerlink" title="不加密"></a>不加密</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set_cookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> <span class="token string">'jack'</span>    response <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'设置成功'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">show_cookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    cookies <span class="token operator">=</span> request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'set_cookies.html'</span><span class="token punctuation">,</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'设置成功'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span>set_signed_cookie<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> request<span class="token punctuation">.</span>get_signed_cookie<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><p>set_signed_cookie有三个参数<br>1.<strong>key</strong><br>2.<strong>value</strong><br>3.<strong>salt</strong>  加盐，输入你要加的盐，可以输入随便字符串设置的加盐cookie要用get_signed_cookie解，用request.COOKIES.get解，获得的是加盐的一个字符串。</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>以登录登出为例子</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'login.html'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name<span class="token operator">=</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> name<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 设置session</span>            request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> username            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'three:mine'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'login.html'</span><span class="token punctuation">)</span></code></pre><h3 id="home-界面"><a href="#home-界面" class="headerlink" title="home 界面"></a>home 界面</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mine</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用get获取session</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'mine.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="登出界面"><a href="#登出界面" class="headerlink" title="登出界面"></a>登出界面</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'three:mine'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 删除session的三种方法，其中推荐flush()，可以自动的把存在数据库中的session删除。</span>    <span class="token comment" spellcheck="true"># response.delete_cookie('sessionid')</span>    <span class="token comment" spellcheck="true"># del request.session['username']</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response</code></pre><p>​            </p>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和为s的连续正数序列</title>
      <link href="/2020/03/06/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/"/>
      <url>/2020/03/06/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="和为s的连续正数序列"><a href="#和为s的连续正数序列" class="headerlink" title="和为s的连续正数序列"></a>和为s的连续正数序列</h1><p><img src="https://gitee.com/silent-666/images/raw/37a4fc9649f604797a82e7fdf8e971082797058d/leetcode/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97.jpg" alt="题目"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type target: int        :rtype: List[List[int]]        """</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        l <span class="token operator">=</span> <span class="token number">1</span>        r <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            sum <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token operator">+</span>l<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>            <span class="token keyword">if</span> sum <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                r <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> sum <span class="token operator">></span> target<span class="token punctuation">:</span>                l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>                l <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>运用到了滑动窗口算法<br>具体参考<a href="https://www.zhihu.com/topic/20746237/intro" target="_blank" rel="noopener">https://www.zhihu.com/topic/20746237/intro</a></p><p><img src="https://gitee.com/silent-666/images/raw/37a4fc9649f604797a82e7fdf8e971082797058d/leetcode/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%971.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗马数字转整数</title>
      <link href="/2020/03/06/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
      <url>/2020/03/06/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h1><p><strong>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</strong><br><img src="https://gitee.com/silent-666/images/raw/e3e1d24b46d9781caf30c1dc3773d5f278ca5c4b/leetcode/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0.jpg" alt="题目"><br><strong>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：<br>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</strong><br><img src="https://gitee.com/silent-666/images/raw/e3e1d24b46d9781caf30c1dc3773d5f278ca5c4b/leetcode/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B01.jpg" alt="输出事例"><br><img src="https://gitee.com/silent-666/images/raw/e3e1d24b46d9781caf30c1dc3773d5f278ca5c4b/leetcode/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B02.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数</title>
      <link href="/2020/03/04/%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>/2020/03/04/%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p><img src="https://gitee.com/silent-666/images/raw/2d105ec211eec62e61b93d9156b30403bd018346/leetcode/%E5%9B%9E%E6%96%87%E6%95%B0.jpg" alt="题目"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type x: int        :rtype: bool        """</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            y <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> y <span class="token operator">==</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type x: int        :rtype: bool        """</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            str_x <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            l <span class="token operator">=</span>len<span class="token punctuation">(</span>str_x<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>               num <span class="token operator">=</span> int<span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span>               sum <span class="token operator">+=</span> num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">**</span><span class="token punctuation">(</span>l<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> sum <span class="token operator">==</span> x<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><img src="https://gitee.com/silent-666/images/raw/2d105ec211eec62e61b93d9156b30403bd018346/leetcode/%E5%9B%9E%E6%96%87%E6%95%B01.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2020/03/02/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2020/03/02/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><p><img src="https://gitee.com/silent-666/images/raw/70286378561c330b434afd53020d716a735ead48/leetcode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.jpg" alt="题目"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        dict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span>num <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            another_num <span class="token operator">=</span> target<span class="token operator">-</span>num            <span class="token keyword">if</span> another_num <span class="token keyword">in</span> dict<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>dict<span class="token punctuation">[</span>another_num<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">]</span>            dict<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> index        <span class="token keyword">return</span> None</code></pre><p><img src="https://gitee.com/silent-666/images/raw/a7d4cc5644f3d1187361c40b2f35d7b4f5d5d429/leetcode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C1.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="/2020/03/02/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/2020/03/02/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h1><p><img src="https://gitee.com/silent-666/images/raw/70286378561c330b434afd53020d716a735ead48/leetcode/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC.jpg" alt="题目"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type x: int        :rtype: int        """</span>        s <span class="token operator">=</span> <span class="token number">0</span>        str_x <span class="token operator">=</span> str<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        l <span class="token operator">=</span> len<span class="token punctuation">(</span>str_x<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> int<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span>            s<span class="token operator">+=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">**</span><span class="token punctuation">(</span>l<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">)</span>           <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">&lt;</span> s <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span>s            <span class="token keyword">return</span> s            <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span></code></pre><p><img src="https://gitee.com/silent-666/images/raw/6ef6d49991cc05e9678efdf2f6c9cf22020b887f/leetcode/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC1.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django模板(数据库)</title>
      <link href="/2020/03/01/django%E6%A8%A1%E6%9D%BF-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/03/01/django%E6%A8%A1%E6%9D%BF-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="django模板-数据库"><a href="#django模板-数据库" class="headerlink" title="django模板(数据库)"></a>django模板(数据库)</h1><p>Django 模型是与数据库相关的，与数据库相关的代码一般写在 models.py 中，Django 支持 sqlite3, MySQL, PostgreSQL等数据库，只需要在settings.py中配置即可，不用更改models.py中的代码，丰富的API极大的方便了使用。</p><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># Create your models here.</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>  name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>  age <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这是person表，这个表有name和age两个字段。接着执行<strong>python manage.py makemigrations</strong> 再执行<strong>python manage.py migrate</strong>就生成了迁移文件和写入数据库，如何对模板发生更改，就再执行这两个命令即可。</p><h2 id="python-shell用法"><a href="#python-shell用法" class="headerlink" title="python shell用法"></a>python shell用法</h2><p><strong>python manage.py shell</strong>进入shell</p><h3 id="新建对象几个方法"><a href="#新建对象几个方法" class="headerlink" title="新建对象几个方法"></a>新建对象几个方法</h3><pre class=" language-python"><code class="language-python"><span class="token number">1.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span> <span class="token string">"Jordan"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">2.</span>p <span class="token operator">=</span> Person<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Kobe"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3.</span>p <span class="token operator">=</span> Person<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"James"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span>p<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为Person对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.</span><span class="token number">4.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_or_create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span></code></pre><h3 id="获取对象的几个方法"><a href="#获取对象的几个方法" class="headerlink" title="获取对象的几个方法"></a>获取对象的几个方法</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取所有的对象值</span><span class="token number">1.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 切片形式获取，获取10个人</span><span class="token number">2.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># get用来获取一个对象，如果需要获取满足条件的一些人，就要用到filter</span><span class="token number">3.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等于</span><span class="token number">4.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  名称严格等于 "abc" 的人</span><span class="token number">5.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__exact<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件</span><span class="token number">6.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__iexact<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 名称中包含 "abc"的人</span><span class="token number">7.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 名称中包含 "abc"，且abc不区分大小写</span><span class="token number">8.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__icontains<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 正则表达式查询</span><span class="token number">9.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__regex<span class="token operator">=</span><span class="token string">"^abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 正则表达式不区分大小写,filter是找出满足条件的，当然也有排除符合某条件的 </span><span class="token number">10.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__iregex<span class="token operator">=</span><span class="token string">"^abc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 排除包含 WZ 的Person对象 </span><span class="token number">11.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">"WZ"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找出名称含有abc, 但是排除年龄是23岁的</span><span class="token number">12.</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span>  </code></pre>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django模板</title>
      <link href="/2020/02/26/django%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/02/26/django%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="django模板"><a href="#django模板" class="headerlink" title="django模板"></a>django模板</h1><h2 id="templates模板语言"><a href="#templates模板语言" class="headerlink" title="templates模板语言"></a>templates模板语言</h2><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>写一个base.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{% block title %}默认标题{% endblock %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这里是默认内容，所有继承自这个模板的，如果不覆盖就显示这里的默认内容。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>{% endblock %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>这个是一个基础模板，以后写其他html可以继承这个模板 。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> block 加自己定义的名字 <span class="token operator">%</span><span class="token punctuation">}</span>这边可以一写需要继承的东西<span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span>```<span class="token comment" spellcheck="true">### extends</span>写一个test<span class="token punctuation">.</span>html```html<span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"generator"</span> content<span class="token operator">=</span><span class="token string">"Hexo 3.9.0"</span><span class="token operator">></span> <span class="token operator">&lt;</span>title<span class="token operator">></span>欢迎光临<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/css/prism-tomorrow.css"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> extends <span class="token string">'base.html'</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> block title <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> block content <span class="token operator">%</span><span class="token punctuation">}</span>这里是首页，欢迎光临<span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>注意：</p><pre class=" language-python"><code class="language-python">extends继承，如果写了<span class="token punctuation">{</span><span class="token operator">%</span> block title <span class="token operator">%</span><span class="token punctuation">}</span>那么默认的就会本顶掉，<span class="token punctuation">{</span><span class="token operator">%</span> block content <span class="token operator">%</span><span class="token punctuation">}</span>也一样</code></pre><h3 id="for循环和List内容显示"><a href="#for循环和List内容显示" class="headerlink" title="for循环和List内容显示"></a>for循环和List内容显示</h3><h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>   TutorialList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"HTML"</span><span class="token punctuation">,</span> <span class="token string">"CSS"</span><span class="token punctuation">,</span> <span class="token string">"jQuery"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Django"</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 或者可以改成context=locals()</span>   <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'home.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'TutorialList'</span><span class="token punctuation">:</span> TutorialList<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="home-html"><a href="#home-html" class="headerlink" title="home.html"></a>home.html</h4><p>创建一个home.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>欢迎光临<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>{% for i in TutorialList %}{{ i }}{% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="for和if"><a href="#for和if" class="headerlink" title="for和if"></a>for和if</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> List <span class="token operator">%</span><span class="token punctuation">}</span>   <span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token operator">not</span> forloop<span class="token punctuation">.</span>last <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><p>forloop表：</p><p><img src="https://gitee.com/silent-666/images/raw/b73aa96bbe7ccfdb756f6fa8a38b79288227519f/django%E6%A8%A1%E6%9D%BF/1.jpg" alt="forloop表"></p><pre class=" language-python"><code class="language-python">注意：<span class="token keyword">for</span> 循环要有一个结束标记<span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>，<span class="token keyword">for</span>可以和<span class="token keyword">if</span>一起用，同样<span class="token keyword">if</span>也要加结束标记<span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> athlete <span class="token keyword">in</span> List <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> athlete <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> empty <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>抱歉，列表为空<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre class=" language-python"><code class="language-python">一般的变量之类的用 <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>（变量），功能类的，比如循环，条件判断是用 <span class="token punctuation">{</span><span class="token operator">%</span>  <span class="token operator">%</span><span class="token punctuation">}</span>（标签）</code></pre><h3 id="获取当前用户"><a href="#获取当前用户" class="headerlink" title="获取当前用户"></a>获取当前用户</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span> request<span class="token punctuation">.</span>user <span class="token punctuation">}</span><span class="token punctuation">}</span>如果登录显示内容，不登录不显示内容</code></pre><h3 id="获取当前网网址"><a href="#获取当前网网址" class="headerlink" title="获取当前网网址"></a>获取当前网网址</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span> request<span class="token punctuation">.</span>path <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="获取当前GET参数"><a href="#获取当前GET参数" class="headerlink" title="获取当前GET参数"></a>获取当前GET参数</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>urlencode <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django反向解析</title>
      <link href="/2020/02/26/django%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/02/26/django%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="django反向解析"><a href="#django反向解析" class="headerlink" title="django反向解析"></a>django反向解析</h1><h2 id="url硬编码"><a href="#url硬编码" class="headerlink" title="url硬编码"></a>url硬编码</h2><p>硬编码的url地址是固定的，当更改路由分发的时候就会失效</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/goods/index/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>url硬编码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><h2 id="url软编码"><a href="#url软编码" class="headerlink" title="url软编码"></a>url软编码</h2><p>软编码的url是动态的，不会随着路由分发的改变而发生变化</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;a href="{% url "good:index" 这里可以添加参数 %}">url软编码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>这里的good是总路由配置的命名空间namespace，index是分发路由时子路由url配置的名称name</p><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><p>在view模板中用<strong>reverse(‘goods:index’)</strong>进行反向解析<br>一般和<strong>redicrect</strong>一起用，进行重定向</p><pre class=" language-python"><code class="language-python"><span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'good:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django视图与网址</title>
      <link href="/2020/02/26/django%E8%A7%86%E5%9B%BE%E4%B8%8E%E7%BD%91%E5%9D%80/"/>
      <url>/2020/02/26/django%E8%A7%86%E5%9B%BE%E4%B8%8E%E7%BD%91%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="django视图与网址"><a href="#django视图与网址" class="headerlink" title="django视图与网址"></a>django视图与网址</h1><p>实现url与view的交互，以在网页上做加减为例子</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> daya_test <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^add/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>add<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="view-py"><a href="#view-py" class="headerlink" title="view.py"></a>view.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span>  HttpResponse<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 或者是a=request.GET.get(a)</span>    a<span class="token operator">=</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>    b<span class="token operator">=</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>    c<span class="token operator">=</span>int<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>int<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="访问需要加上参数"><a href="#访问需要加上参数" class="headerlink" title="访问需要加上参数"></a>访问需要加上参数</h3><p>访问<strong>localhost:8000/add?a=4&amp;b=5</strong><br>就可以返回结果9</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="urls-py-1"><a href="#urls-py-1" class="headerlink" title="urls.py"></a>urls.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> daya_test <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true"># 这里(\d+)是正则表达式，可以表示两个参数</span>    url<span class="token punctuation">(</span>r<span class="token string">'^add/(\d+)/(\d+)'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>add<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="view-py-1"><a href="#view-py-1" class="headerlink" title="view.py"></a>view.py</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这里要给函数传递两个参数与urls.py中保持一致</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> int<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>int<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>这个时候只要访问<strong>localhost:8000/add/4/5</strong>，结果为9</p>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django路由分配</title>
      <link href="/2020/02/26/django%E8%B7%AF%E7%94%B1%E5%88%86%E9%85%8D/"/>
      <url>/2020/02/26/django%E8%B7%AF%E7%94%B1%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="django路由分配"><a href="#django路由分配" class="headerlink" title="django路由分配"></a>django路由分配</h1><h2 id="总路由配置"><a href="#总路由配置" class="headerlink" title="总路由配置"></a>总路由配置</h2><p>先创建一个app（python manage.py startapp App），找到urls.py，添加代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span> include<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> adminurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 添加一个namespace名称空间</span>    url<span class="token punctuation">(</span>r<span class="token string">'^app/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'App.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h2><p>接着再App文件夹下创建一个urls.py的文件，并添加代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> App <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token comment" spellcheck="true"># show_student是view.py文件里的一个函数，当访问时就会执行这个函数，name设置一个名字</span>    url<span class="token punctuation">(</span>r<span class="token string">'^students/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>show_student<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'show_student'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="访问url"><a href="#访问url" class="headerlink" title="访问url"></a>访问url</h2><p>1.开启服务器命令<strong>python manage.py runserver</strong><br>2.访问<strong>localhost:8000/app/students/</strong></p>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django项目基本配置</title>
      <link href="/2020/02/26/django%E9%A1%B9%E7%9B%AE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/26/django%E9%A1%B9%E7%9B%AE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="django项目基本配置"><a href="#django项目基本配置" class="headerlink" title="django项目基本配置"></a>django项目基本配置</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>这里取名为HelloDjango</p><pre class=" language-python"><code class="language-python">python django<span class="token operator">-</span>admin<span class="token punctuation">.</span>py startproject HelloDjango</code></pre><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>HelloDjango<br>├── manage.py<br>└── HelloDjango<br>    ├── <strong>init</strong>.py<br>    ├── settings.py<br>    ├── urls.py<br>    └── wsgi.py<br>新建一个 HelloDjango 目录，其中还有一个HelloDjango目录，这个子目录 HelloDjango中是一些项目的设置 settings.py 文件，总的urls配置文件 urls.py 以及部署服务器时用到的 wsgi.py 文件， <strong>init</strong>.py 是python包的目录结构必须的，与调用有关。</p><h2 id="新建一个应用（app）"><a href="#新建一个应用（app）" class="headerlink" title="新建一个应用（app）"></a>新建一个应用（app）</h2><p>这里取名为learn</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># learn 是一个app的名称</span>python manage<span class="token punctuation">.</span>py startapp learn </code></pre><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><p>learn/<br>├── <strong>init</strong>.py<br>├── admin.py<br>├── models.py<br>├── tests.py<br>└── views.py</p><h2 id="修改setting-py"><a href="#修改setting-py" class="headerlink" title="修改setting.py"></a>修改setting.py</h2><h3 id="注册app"><a href="#注册app" class="headerlink" title="注册app"></a>注册app</h3><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 这里注册learn</span>    <span class="token string">'learn'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="配置templates"><a href="#配置templates" class="headerlink" title="配置templates"></a>配置templates</h3><p>在第一个HelloDjango文件夹下添加一个名为templates的文件夹，用于存放html并进行路径配置，如下：</p><pre class=" language-python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.django.DjangoTemplates'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 添加路径</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>添加路径为</p><pre class=" language-python"><code class="language-python"><span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>默认的数据库是sqlite，已经配置好的代码如下：</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.sqlite3'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'db.sqlite3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>连接mysql</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true"># 把sqlite改成mysql</span>             <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 填写数据库名称</span>             <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 用户名称</span>             <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 密码</span>             <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 主机IP</span>             <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'192.168.223.128'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 端口号，默认3306</span>             <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里还要在init.py中添加一个代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="配置语言"><a href="#配置语言" class="headerlink" title="配置语言"></a>配置语言</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 中文</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span><span class="token comment" spellcheck="true"># 时区，固定</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span>USE_I18N <span class="token operator">=</span> <span class="token boolean">True</span>USE_L10N <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 这里改成False</span>USE_TZ <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">### 配置static文件路径，存放css，js</span>在第一个HelloDjango文件夹下创建一个名为static的文件夹，在setting<span class="token punctuation">.</span>py最后添加如下代码：​```pythonSTATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django结构简介</title>
      <link href="/2020/02/24/django%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/02/24/django%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Django流程介绍"><a href="#Django流程介绍" class="headerlink" title="Django流程介绍"></a>Django流程介绍</h2><p><img src="https://gitee.com/silent-666/images/raw/6b46c1d372679d3ebc4cc0b96da4e72467d62813/django%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B/1.png" alt><br>又或者是这样的结构图：<br><img src="https://gitee.com/silent-666/images/raw/6b46c1d372679d3ebc4cc0b96da4e72467d62813/django%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B/2.png" alt></p><h3 id="MVC结构"><a href="#MVC结构" class="headerlink" title="MVC结构"></a>MVC结构</h3><p>MVC结构是众所周知的模式：</p><h4 id="M——model（模型）"><a href="#M——model（模型）" class="headerlink" title="M——model（模型）"></a>M——model（模型）</h4><p>管理应用程序的状态（通常存储到数据库中），并约束改变状态的行为（或者叫做“业务规则”）。</p><h4 id="V——view（视图）"><a href="#V——view（视图）" class="headerlink" title="V——view（视图）"></a>V——view（视图）</h4><p>负责把数据格式化后呈现给用户。</p><h4 id="C——controller（控制器）"><a href="#C——controller（控制器）" class="headerlink" title="C——controller（控制器）"></a>C——controller（控制器）</h4><p>接受外部用户的操作，根据操作访问模型获取数据，并调用“视图”显示这些数据。控制器是将“模型”和“视图”隔离，并成为二者之间的联系纽带。</p><h3 id="MTV结构"><a href="#MTV结构" class="headerlink" title="MTV结构"></a>MTV结构</h3><p>Django也是一个MVC框架。但是在Django中，控制器接受用户输入的部分由框架自行处理，所以 Django 里更关注的是模型（Model）、模板(Template)和视图（Views），称为 MTV模式</p><h4 id="M——model（模型）-1"><a href="#M——model（模型）-1" class="headerlink" title="M——model（模型）"></a>M——model（模型）</h4><p>即数据存取层。 该层处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</p><h4 id="T——template（模板）"><a href="#T——template（模板）" class="headerlink" title="T——template（模板）"></a>T——template（模板）</h4><p>即表现层。 该层处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。</p><h4 id="V——view（视图）-1"><a href="#V——view（视图）-1" class="headerlink" title="V——view（视图）"></a>V——view（视图）</h4><p>即业务逻辑层。 该层包含存取模型及调取恰当模板的相关逻辑。 你可以把它看作模型与模板之间的桥梁。</p><h2 id="django文件一览"><a href="#django文件一览" class="headerlink" title="django文件一览"></a>django文件一览</h2><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><p>网址入口，关联到对应的views.py中的一个函数（或者generic类），访问网址就对应一个函数。</p><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><p>处理用户发出的请求，从urls.py中对应过来, 通过渲染templates中的网页可以将显示内容，比如登陆后的用户名，用户请求的数据，输出到网页。</p><h3 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h3><p>与数据库操作相关，存入或读取数据时用到这个，当然用不到数据库的时候 你可以不使用。</p><h3 id="forms-py"><a href="#forms-py" class="headerlink" title="forms.py"></a>forms.py</h3><p>表单，用户在浏览器上输入数据提交，对数据的验证工作以及输入框的生成等工作，当然你也可以不使用。</p><h3 id="templates-文件夹"><a href="#templates-文件夹" class="headerlink" title="templates 文件夹"></a>templates 文件夹</h3><p>views.py 中的函数渲染templates中的html模板，得到动态内容的网页，当然可以用缓存来提高速度。</p><h3 id="admin-py"><a href="#admin-py" class="headerlink" title="admin.py"></a>admin.py</h3><p>后台，可以用很少量的代码就拥有一个强大的后台。</p><h3 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h3><p>Django 的设置，配置文件，比如 DEBUG 的开关，静态文件的位置等。</p><h3 id="static文件夹"><a href="#static文件夹" class="headerlink" title="static文件夹"></a>static文件夹</h3><p>存放css，js等静态文件</p>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django模板一对多</title>
      <link href="/2020/02/23/django%E6%A8%A1%E6%9D%BF%E4%B8%80%E5%AF%B9%E5%A4%9A/"/>
      <url>/2020/02/23/django%E6%A8%A1%E6%9D%BF%E4%B8%80%E5%AF%B9%E5%A4%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="django模板一对多"><a href="#django模板一对多" class="headerlink" title="django模板一对多"></a>django模板一对多</h1><p>以一个班级有多个学生为例子, 实现点击班级查看对应学生</p><h3 id="djngo代码部分"><a href="#djngo代码部分" class="headerlink" title="djngo代码部分"></a>djngo代码部分</h3><h3 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># Create your models here.</span><span class="token keyword">class</span> <span class="token class-name">Grade</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    g_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置student外键</span>    s_grade <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Grade<span class="token punctuation">)</span></code></pre><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> Five <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^showstudent/(\d+)'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>show_student<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'show_student'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^showgrade/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>show_grade<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'show_grade'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="views-py代码"><a href="#views-py代码" class="headerlink" title="views.py代码"></a>views.py代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">from</span> Five<span class="token punctuation">.</span>models <span class="token keyword">import</span> Student<span class="token punctuation">,</span> Grade<span class="token keyword">def</span> <span class="token function">show_grade</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    grades <span class="token operator">=</span> Grade<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'show_grade.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># g_id用来接收request.GET的参数</span><span class="token keyword">def</span> <span class="token function">show_student</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> g_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里s_grade改成s_grade_id也可以</span>    students <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>s_grade<span class="token operator">=</span>g_id<span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'show_student.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="show-grade-html"><a href="#show-grade-html" class="headerlink" title="show_grade.html"></a>show_grade.html</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>show_grade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   {% for grade in grades %}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>five:show_student<span class="token punctuation">'</span> grade.id %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ grade.g_name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="show-student-html"><a href="#show-student-html" class="headerlink" title="show_student.html"></a>show_student.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>show_student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    {% for student in students %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ student.s_name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h2><h3 id="Five-student表"><a href="#Five-student表" class="headerlink" title="Five_student表"></a>Five_student表</h3><h4 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> Five_student<span class="token punctuation">(</span>    id         <span class="token keyword">integer</span>     <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span> autoincrement<span class="token punctuation">,</span>    s_name     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    s_grade_id <span class="token keyword">integer</span>     <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">references</span> Five_grade<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> Five_student_dcb74a5b    <span class="token keyword">on</span> Five_student <span class="token punctuation">(</span>s_grade_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="添加学生"><a href="#添加学生" class="headerlink" title="添加学生"></a>添加学生</h5><p><img src="https://gitee.com/silent-666/images/raw/f9b3c80ac587da831b1fddfab166c1a94dc5700c/django%E6%A8%A1%E6%9D%BF%E4%B8%80%E5%AF%B9%E5%A4%9A/1.png" alt="学生表"></p><h3 id="Five-grade表"><a href="#Five-grade表" class="headerlink" title="Five_grade表"></a>Five_grade表</h3><h4 id="sql语句-1"><a href="#sql语句-1" class="headerlink" title="sql语句"></a>sql语句</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> Five_grade<span class="token punctuation">(</span>    id     <span class="token keyword">integer</span>     <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span> autoincrement<span class="token punctuation">,</span>    g_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="添加班级"><a href="#添加班级" class="headerlink" title="添加班级"></a>添加班级</h5><p><img src="https://gitee.com/silent-666/images/raw/f9b3c80ac587da831b1fddfab166c1a94dc5700c/django%E6%A8%A1%E6%9D%BF%E4%B8%80%E5%AF%B9%E5%A4%9A/2.png" alt="班级表"></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>访问<strong>localhost:8000/five/showgrade</strong></p><p><img src="https://gitee.com/silent-666/images/raw/f9b3c80ac587da831b1fddfab166c1a94dc5700c/django%E6%A8%A1%E6%9D%BF%E4%B8%80%E5%AF%B9%E5%A4%9A/3.png" alt></p><p>点击班级(python，java，c++)查看对应学生</p><p><img src="https://gitee.com/silent-666/images/raw/f9b3c80ac587da831b1fddfab166c1a94dc5700c/django%E6%A8%A1%E6%9D%BF%E4%B8%80%E5%AF%B9%E5%A4%9A/4.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django模板OnetoOne</title>
      <link href="/2020/02/15/django%E6%A8%A1%E6%9D%BFOnetoOne/"/>
      <url>/2020/02/15/django%E6%A8%A1%E6%9D%BFOnetoOne/</url>
      
        <content type="html"><![CDATA[<h1 id="Django模板OnetoOne"><a href="#Django模板OnetoOne" class="headerlink" title="Django模板OnetoOne"></a>Django模板OnetoOne</h1><p>以人绑定身份证为例子，以下是代码</p><h2 id="models-py代码"><a href="#models-py代码" class="headerlink" title="models.py代码"></a>models.py代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> django<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># Create your models here.</span><span class="token comment" spellcheck="true">#主表</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从表</span><span class="token keyword">class</span> <span class="token class-name">IdCard</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 设置unique为True，使id_num唯一</span>    id_num <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置一对一， 设置on_delete为models.PROTECT是防止级联删除，必须先删除身份证才能删除这个人</span>    id_person <span class="token operator">=</span> models<span class="token punctuation">.</span>OneToOneField<span class="token punctuation">(</span>Person<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>PROTECT<span class="token punctuation">)</span></code></pre><h2 id="urls-py代码"><a href="#urls-py代码" class="headerlink" title="urls.py代码"></a>urls.py代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> Three <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^addperson/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>add_person<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'add_person'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^addid/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>add_id<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'add_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^bind/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>bind<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'bind'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^removeid/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>remove_id<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'remove_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^removeperson/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>remove_person<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'remove_person'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="views-py代码"><a href="#views-py代码" class="headerlink" title="views.py代码"></a>views.py代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">from</span> Three<span class="token punctuation">.</span>models <span class="token keyword">import</span> Person<span class="token punctuation">,</span> IdCard<span class="token keyword">def</span> <span class="token function">add_person</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    person <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>    person<span class="token punctuation">.</span>name <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    person<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"添加person成功%s"</span> <span class="token operator">%</span> person<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_id</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    id_card <span class="token operator">=</span> IdCard<span class="token punctuation">(</span><span class="token punctuation">)</span>    id_card<span class="token punctuation">.</span>id_num <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    id_card<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"添加id成功%s"</span> <span class="token operator">%</span> id_card<span class="token punctuation">.</span>id_num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bind</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    person <span class="token operator">=</span> Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span>    id_card <span class="token operator">=</span> IdCard<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span>    id_card<span class="token punctuation">.</span>id_person <span class="token operator">=</span> person    id_card<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"绑定成功"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_id</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    id_card <span class="token operator">=</span> IdCard<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span>    id_card<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'身份证删除成功'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove_person</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    person <span class="token operator">=</span> Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span>    person<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"人员移除成功"</span><span class="token punctuation">)</span></code></pre><h2 id="通过人获取idcard，在views-py添加"><a href="#通过人获取idcard，在views-py添加" class="headerlink" title="通过人获取idcard，在views.py添加"></a>通过人获取idcard，在views.py添加</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    person <span class="token operator">=</span> Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span>    id_card <span class="token operator">=</span> IdCard<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id_person<span class="token operator">=</span>person<span class="token punctuation">)</span>    id <span class="token operator">=</span> id_card<span class="token punctuation">.</span>id_num    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span> id<span class="token punctuation">)</span></code></pre><p>步骤是拿person的id去IdCard的表中查询</p><h2 id="通过idcard获取人的名字，在views-py中添加"><a href="#通过idcard获取人的名字，在views-py中添加" class="headerlink" title="通过idcard获取人的名字，在views.py中添加"></a>通过idcard获取人的名字，在views.py中添加</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    id_card <span class="token operator">=</span> IdCard<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span>    person_name <span class="token operator">=</span> id_card<span class="token punctuation">.</span>id_person<span class="token punctuation">.</span>name    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span> person_name<span class="token punctuation">)</span></code></pre><p>步骤是拿id_person索引去person表查询，和上面相比，从表查询可以直接把字段当成属性用点（.）的形式查询。</p><h2 id="两个表是Sql语句"><a href="#两个表是Sql语句" class="headerlink" title="两个表是Sql语句"></a>两个表是Sql语句</h2><h3 id="Three-person"><a href="#Three-person" class="headerlink" title="Three_person"></a>Three_person</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> Three_person<span class="token punctuation">(</span>    id   <span class="token keyword">integer</span>     <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span> autoincrement<span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Three-idcard"><a href="#Three-idcard" class="headerlink" title="Three_idcard"></a>Three_idcard</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> Three_idcard<span class="token punctuation">(</span>    id           <span class="token keyword">integer</span>     <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span> autoincrement<span class="token punctuation">,</span>    id_num       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">unique</span><span class="token punctuation">,</span>    id_person_id <span class="token keyword">integer</span>        <span class="token keyword">unique</span>        <span class="token keyword">references</span> Three_person<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>值得注意的是references的一个对象（object）Three_person</p>]]></content>
      
      
      <categories>
          
          <category> django1.9.13 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib的用法</title>
      <link href="/2019/12/11/matplotlib%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2019/12/11/matplotlib%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 设置图像的大小，dpi是设置图像的清晰度</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置图像标题</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置x，y轴的坐标，这里面可以传入两个参数，第一个就轴的坐标参数（ticks），第二个是对应坐标的标签值（labels）</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置x，y轴的坐标代表的是什么</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 展示图片</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 展示图例</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存图片,填路径</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加网格图</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><p>特别注意的是matplotlib是不支持的中文的，下面介绍设置中文的三种方法</p><h4 id="第一种用法"><a href="#第一种用法" class="headerlink" title="第一种用法"></a>第一种用法</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> font_manger<span class="token comment" spellcheck="true"># 指定字体路径即可</span>my_font <span class="token operator">=</span> font_manger<span class="token punctuation">.</span>FontProperties<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>当需要显示中文字体时，加上fontproperties=my_font就可以了</p><h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p>直接加上fontproperties=”指定字体”即可，如黑体SimHei等</p><h4 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 设置全局字体，下面就无需设置fontproperties</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 防止x轴字体出错</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><h2 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 传入x，y必须是一样长度的列表</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制散点图</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制条竖着的条形图</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制横着的条形图</span>plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制直方图,直方图要指定其num_bins，即它的组数，一般是(列表的最大值-列表的的最小值)//组距，组距看数据的多少而设，一百个以内的数据一般设5~10组。将desity设置文True为频率直方图，False为频数直方图，默认为False</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络编程</title>
      <link href="/2019/09/24/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/09/24/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="网络七层协议"><a href="#网络七层协议" class="headerlink" title="网络七层协议"></a>网络七层协议</h2><p>网络的七层协议由底层到顶层包括：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层</p><h3 id="socket套接字"><a href="#socket套接字" class="headerlink" title="socket套接字"></a>socket套接字</h3><p>传输层是实现端到端的通信,因此，每一个传输层连接有两个端点。传输层连接的端点叫做套接字（socket）。端口号拼接到IP地址就构成了套接字。所谓套接字，实际上是一个通信端点，每个套接字都有一个套接字序号，包括主机的IP地址与一个16位的主机端口号，即形如（主机IP地址：端口号）。例如，如果IP地址是210.37.145.1，而端口号是23，那么得到套接字就是（210.37.145.1：23）</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#打印设备名称和IPV4地址</span><span class="token keyword">import</span> socket<span class="token keyword">from</span> binascii <span class="token keyword">import</span> hexlify<span class="token keyword">def</span> <span class="token function">get_computer_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    host_name<span class="token operator">=</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>host_name<span class="token punctuation">)</span>    ip_address<span class="token operator">=</span>socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>host_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ip_address<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印远程设备的IP</span><span class="token keyword">def</span> <span class="token function">get_remote_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    remote_host<span class="token operator">=</span><span class="token string">'www.baidu.com'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        ip_address<span class="token operator">=</span>socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>remote_host<span class="token punctuation">)</span>    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>remote_host<span class="token punctuation">,</span>ip_address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把IPV4地址转换成不同格式</span><span class="token comment" spellcheck="true">#如果要使用低层网络函数，有时普通的字符串形式的IP地址并不是很有用，需要把它们转换成打包后的32位二进制格式。</span><span class="token keyword">def</span> <span class="token function">convert_ipv4_address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ip_address <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'192.168.1.1'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#inet_aton将地址转换为32位的网络序列IP地址</span>        ip<span class="token operator">=</span>socket<span class="token punctuation">.</span>inet_aton<span class="token punctuation">(</span>ip_address<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将二进制IP变为十六进制</span>        ip16<span class="token operator">=</span>hexlify<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ip16<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#inet_ntoa与inet_aton相反</span>        f_ip<span class="token operator">=</span>socket<span class="token punctuation">.</span>inet_ntoa<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f_ip<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_server_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'http'</span><span class="token punctuation">,</span><span class="token string">'smtp'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        get_port<span class="token operator">=</span>socket<span class="token punctuation">.</span>getservbyname<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'tcp'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>get_port<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>getservbyname<span class="token punctuation">(</span><span class="token string">'domain'</span><span class="token punctuation">,</span><span class="token string">'udp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        get_name<span class="token operator">=</span>socket<span class="token punctuation">.</span>getservbyport<span class="token punctuation">(</span>port<span class="token punctuation">,</span><span class="token string">'tcp'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>get_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>getservbyport<span class="token punctuation">(</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token string">'udp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Python的 socket 库提供了将数据在网络字节序和主机字节序之间相互转换的函数。ntohl()和htonl()</span><span class="token keyword">def</span> <span class="token function">convert_integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token number">1234</span>    <span class="token comment" spellcheck="true">#Long host byte order,stort host byte order</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>ntohl<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>socket<span class="token punctuation">.</span>ntohs<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Long Network byte order,short Network byte order</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>htonl<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>socket<span class="token punctuation">.</span>htons<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_socket_timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>gettimeout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>gettimeout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打印设备名称和IPV4地址"</span><span class="token punctuation">)</span>    get_computer_info<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打印远程设备的IP"</span><span class="token punctuation">)</span>    get_remote_info<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"把IPV4地址转换成不同格式"</span><span class="token punctuation">)</span>    convert_ipv4_address<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"通过指定的端口和协议找到服务名"</span><span class="token punctuation">)</span>    find_server_name<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"主机字节序和网络字节序之间相互转换"</span><span class="token punctuation">)</span>    convert_integer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"设定并获取默认的套接字超时时间"</span><span class="token punctuation">)</span>    test_socket_timeout<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h4><pre class=" language-python"><code class="language-python">打印设备名称和IPV4地址LAPTOP<span class="token operator">-</span>2QSFJCLP<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">223.1</span>打印远程设备的IPwww<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">183.232</span><span class="token punctuation">.</span><span class="token number">231.174</span>把IPV4地址转换成不同格式b<span class="token string">'\x7f\x00\x00\x01'</span>b<span class="token string">'7f000001'</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>b<span class="token string">'\xc0\xa8\x01\x01'</span>b<span class="token string">'c0a80101'</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.1</span>通过指定的端口和协议找到服务名<span class="token number">80</span><span class="token number">25</span><span class="token number">53</span>httpsmtpdomain主机字节序和网络字节序之间相互转换<span class="token number">3523477504</span> <span class="token number">53764</span><span class="token number">3523477504</span> <span class="token number">53764</span>设定并获取默认的套接字超时时间None<span class="token number">100.0</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的多线程</title>
      <link href="/2019/09/23/Python%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2019/09/23/Python%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程（Thread）也叫轻量级进程，是操作系统能够进行运算调度的最小单位，它被包涵在进程之中，是进程中的实际运作单位。线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>假定有一 7 * 24 小时不停工的工厂，由于其电力有限，一次仅供一个车间使用，当一个车间在生产时，其他车间停工。在这里我们可以理解这个工厂相当于操作系统，供电设备相当于 CPU，一个车间相当于一个进程。</p><p>一个车间里，可以有很多工人。他们协同完成一个任务。车间的空间是工人们共享的，这里一个工人就相当于一个线程，一个进程可以包括多个线程。比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。</p><h2 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h2><p>有时候资源有限，比如有些房间最多只能容纳一个人，当一个人占用的时候，其他人就不能进去，只能等待。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex ），防止多个线程同时读写某一块内存区域</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>还有些房间，可以同时容纳 n 个人，比如厨房。也就是说，如果人数大于 n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。这时的解决方法，就是在门口挂 n 把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做”信号量”（ Semaphore ），用来保证多个线程不会互相冲突。</p><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><h4 id="互斥锁-1"><a href="#互斥锁-1" class="headerlink" title="互斥锁"></a>互斥锁</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#互斥锁</span><span class="token keyword">import</span> threading<span class="token keyword">from</span> threading <span class="token keyword">import</span> Threadnum<span class="token operator">=</span><span class="token number">0</span>lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task_thread</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num<span class="token operator">=</span>num<span class="token operator">+</span>n        num<span class="token operator">=</span>num<span class="token operator">-</span>n    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task_thread<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task_thread<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t3<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task_thread<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t3<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t3<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><pre class=" language-bash"><code class="language-bash">0</code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>如果不加上lock.acquire()和lock.release()那么结果就是一个不确定的值，因为一个线程没结束下一个线程开启，而此时这个线程取到的结果是中间结果。有了互斥锁就能保证在for循环执行之后再执行开启下一个线程</p><h4 id="信号量-1"><a href="#信号量-1" class="headerlink" title="信号量"></a>信号量</h4><p>模拟银行办理业务</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">import</span> timesemaphore<span class="token operator">=</span>threading<span class="token punctuation">.</span>BoundedSemaphore<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">yewubanli</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    semaphore<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{time.strftime("%y-%m-%d %H-%M-%S")},{name}正在办理业务'</span><span class="token punctuation">)</span>    semaphore<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token operator">=</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>yewubanli<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> list<span class="token punctuation">:</span>    a<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> b <span class="token keyword">in</span> list<span class="token punctuation">:</span>    b<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>只允许三个线程线程开启，等有一个线程执行完下一个线程才能开始执行，就好比一个房间只能容纳三个，要等其中一个人出来，下一个人才能进去</p><h2 id="多线程在类的使用方法"><a href="#多线程在类的使用方法" class="headerlink" title="多线程在类的使用方法"></a>多线程在类的使用方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>通过继承Therad，重写run方法来实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#这里是你要实现的的功能的代码</span>       <span class="token keyword">pass</span>t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span>n<span class="token punctuation">)</span>t2<span class="token operator">=</span>MyThread<span class="token punctuation">(</span>n<span class="token punctuation">)</span>t3<span class="token operator">=</span>MyThread<span class="token punctuation">(</span>n<span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t3<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t3<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>这是另一种重写方法，比较灵活</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>target<span class="token operator">=</span>target        self<span class="token punctuation">.</span>args<span class="token operator">=</span>args    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>target<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task_thread</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#这里是你要实现的的功能的代码</span>    <span class="token keyword">pass</span>t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>MyThread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t3<span class="token operator">=</span>MyThread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t3<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t3<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的鸭子类型和单例模式</title>
      <link href="/2019/09/22/python%E7%9A%84%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/22/python%E7%9A%84%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>当看到一只鸟走起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子</p><h2 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h2><p>在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为鸭的对象，并调用它的走和叫方法。</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">walk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this man walk like a duck"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">swim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this man swim like a duck"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">duck</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token punctuation">)</span>    animal<span class="token punctuation">.</span>swim<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token punctuation">)</span>duck<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    </code></pre><h4 id="输出结果为："><a href="#输出结果为：" class="headerlink" title="输出结果为："></a>输出结果为：</h4><pre class=" language-python"><code class="language-python">this man walk like a duckthis man swim like a duck</code></pre><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p><p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p><p>在Python中，我们可以用多种方法来实现单例模式</p><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>其实，Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：<br>mysingleton.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>singleton<span class="token operator">=</span>Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>将上面的代码保存在文件 mysingleton.py 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象</p><h3 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    _instance <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">_singleton</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> _instance<span class="token punctuation">:</span>            _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> _singleton@Singleton<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> agea1 <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><h4 id="输出结果为：-1"><a href="#输出结果为：-1" class="headerlink" title="输出结果为："></a>输出结果为：</h4><pre class=" language-python"><code class="language-python"><span class="token number">10</span><span class="token number">10</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象思想</title>
      <link href="/2019/09/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/"/>
      <url>/2019/09/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="面向过程和面向对象的区别"><a href="#面向过程和面向对象的区别" class="headerlink" title="面向过程和面向对象的区别"></a>面向过程和面向对象的区别</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>1.把完的成某一个需求的 所有步骤 从头到尾 逐步实现<br>2.根据开发要求，将某些功能独立的代码封装成一个又一个函数<br>3.最后完成的代码，就是顺序的调用不同的函数 </p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>1.注重步骤与过程，不注重职责分工<br>2.如果需求复杂，代码会变得很复杂<br>3.开发复杂项目，没有固定的套路，开发难度很大 </p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>1.在完成某一个需求前，首先确定职责–要做的事(方法)<br>2.根据职责确定不同的对象，在对象内部封装不同的方法(多个)<br>3.最后完成代码，就是顺序的让不同的对象调用不同的方法 </p><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><p>1.注重对象和职责，不同的对象承担不同的职责<br>2.更加适合对复杂的需求变化，是专门应对复杂项目的开发，提供的固定套路<br>3.需要在面向过程的基础上，再学习一些面向对象的语法</p><h3 id="面向对象的两个核心概念"><a href="#面向对象的两个核心概念" class="headerlink" title="面向对象的两个核心概念"></a>面向对象的两个核心概念</h3><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a>类的概念</h4><p>类：是对一群具有相同特征或行为的事物的一个统称，是抽象的，不能直接使用(就好比，飞机图纸不能直接飞上天)<br>特征:被称为属性<br>行为:被称为方法<br>类 就相当于制造飞机时的图纸，是一个模板，是负责创建对象的</p><h4 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h4><p>类名：满足这类事物的名字(大驼峰命名法)<br>大驼峰命名法：<br>1.每个单词的首字母大写<br>2.单词与单词之间没有下划线<br>2.属性:这个类创建出来的对象有什么样的特征<br>3.方法：这个类创建出来的对象有什么样的行为<br>类名的确定：<br>名词提炼法:分析整个业务流程，出现的名词，通常就是找到的类名<br>定义一个只包含方法的类<br>class 类名：<br>def 方法1(self,参数列表):<br>      pass<br>def 方法2(self,参数列表):<br>      pass<br>方法的定义格式和函数的几乎一样<br>区别在于第一个参数必须是self</p><h4 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h4><p>对象：是由类创建出来的一个具体的存在，可以直接使用(图纸创造出来的飞机，可以飞上天) 由哪一个类创建出来的对象，就拥有哪一个类的定义的属性和方法<br>“对象就相当于用图纸创造出来的飞机” 在程序开发中，应该先有类，再有对象 </p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>当一个类定义完成之后，要使用这个类来创建对象<br>对象变量 = 类名()</p>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础篇</title>
      <link href="/2019/09/21/python%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2019/09/21/python%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="一些函数的使用方法"><a href="#一些函数的使用方法" class="headerlink" title="一些函数的使用方法"></a>一些函数的使用方法</h2><h4 id="定义一个字符串：str-”abcdecfh”"><a href="#定义一个字符串：str-”abcdecfh”" class="headerlink" title="定义一个字符串：str=”abcdecfh”"></a>定义一个字符串：str=”abcdecfh”</h4><h3 id="一、字符串的判断"><a href="#一、字符串的判断" class="headerlink" title="一、字符串的判断"></a>一、字符串的判断</h3><pre class=" language-python"><code class="language-python">str<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#字符串大写</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字符串小写</span>capitalize（）<span class="token comment" spellcheck="true">#首字母大写</span>title（） <span class="token comment" spellcheck="true"># 所有单词首字母大写</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#判断是不是数字类型</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#判断是不是数字类型</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#判断是不是数字类型</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#判断是不是纯字母</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#判断是不是字母加数字，但是字符串中不能有空格</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#判断是不是空白符</span>isidentifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#判断首字母的规范</span></code></pre><h2 id="二、字符串的扩充"><a href="#二、字符串的扩充" class="headerlink" title="二、字符串的扩充"></a>二、字符串的扩充</h2><h5 id="两边扩充"><a href="#两边扩充" class="headerlink" title="两边扩充"></a>两边扩充</h5><pre class=" language-python"><code class="language-python">str<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#两边扩充“=”</span></code></pre><h5 id="单边扩充"><a href="#单边扩充" class="headerlink" title="单边扩充"></a>单边扩充</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#单边扩充ljust:左对齐右扩充  rjust:右对齐左扩充</span>str<span class="token punctuation">.</span>ljust <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span> str<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span>str<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token string">"+100"</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：+0100（“-”的同理）</span>str<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#统计某一个值出现的次数</span>str<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#参数2代表从第几个开始找</span>str<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#6代表到哪里结束</span>str<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"fgh"</span><span class="token punctuation">,</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>、str<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用什么开头用什么结尾,一个满足为Ture</span>str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> 、rfind<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从左找</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之路——路漫漫兮其修远兮</title>
      <link href="/2019/09/21/python%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E8%B7%AF%E6%BC%AB%E6%BC%AB%E5%85%AE%E5%85%B6%E4%BF%AE%E8%BF%9C%E5%85%AE/"/>
      <url>/2019/09/21/python%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E8%B7%AF%E6%BC%AB%E6%BC%AB%E5%85%AE%E5%85%B6%E4%BF%AE%E8%BF%9C%E5%85%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="成功需要自我管理"><a href="#成功需要自我管理" class="headerlink" title="成功需要自我管理"></a>成功需要自我管理</h2><p>当你拼命想完成一件事的时候，你就不再是别人的对手，或者说得更确切一些，别人就不再是你的对手了，不管是谁，只要下了这个决心，他就会立刻觉得增添了无穷的力量，而他的视野也随之开阔了。</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 座右铭 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
